sudo: reboot|reload|update|join|part|mode|topic|kick|nick|msg|redirect|ignore
repl: rs|clojure|vlang|cj|scheme|jsx|html

DOC / CMDS
===
clean up TODO
use a better password
update config
    autorejoin code
    memo
changelog
update guide
    storage moved to

actual docs / changelog


colLimit charLimit lineLimit
reloadable config
web can be disabled
remove old events
IRC.listen filter showError
syntax errors
removal of dateFns and _
IRC.sudo().node.events.reloadVM.call();
IRC.sudo().node.parent.reloadEvents.call();
IRC.sudo().node.parent.reloadVM.call();
const dateFns = require('date-fns@1.30.1');
const _ = require('lodash');
removed channels and commandLimit
update config to explain getChannel
IBIP example
update help
webpack to esbuild
fewer deps
ignoreEvents
curl -u io:password https://nibblr.pw/api/iostream
update ~help add ~about
rm -rm cache/acquire
fetch
event.fetchURL
webhooks
    queryparams / body
setDebug / internal API / admin commands
ignoreEvents -> enableEvents
SQL
    subset / prepare cache
    escaping
    many/one/run
    async
IRC.setNamespace
IRC.queryConfig

https://i.imgur.com/sCCrrgW.png

// tick|message|webhook.name
// print|command|eval|join|part|nick|acquire

    mark log with isSelf
    memo
    remind

memo / SQL
===

    // for memo, the connection will always be open ^_^
memo: more than line limit memos
enableMemo config
// ~memo
    have a check if it's setup  already and do if not
// ~remind

get status ot events / sql workers

// time db tick attempts
}
// console.time the db calls I guess
            // CREATE TABLE IF NOT EXISTS events (
            //     idx INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
            //     callback VARCHAR (100),
            //     type VARCHAR (10),
            //     timestamp DATETIME (20),
            //     init DATETIME (20),
            //     user VARCHAR (100),
            //     target VARCHAR (100),
            //     message TEXT
            // );

        // // events

        // const eventInsertQuery = db.prepare(`
            // INSERT INTO events (
            //     callback,
            //     type,
            //     timestamp,
            //     init,
            //     user,
            //     target,
            //     message
            // )
            // VALUES (?,?,?,?,?,?,?)
        // `);

        // const eventFns = {};
        // const speakElapsedQuery = db.prepare(`
            // SELECT * FROM events
            // WHERE timestamp < ?
            // AND type = 'speak'
            // AND UPPER(target) = UPPER(?)
        // `);
        // eventFns.speakElapsed = (target) => {
            // const obj = speakElapsedQuery.all((new Date()).toISOString(), target);
            // return Array.isArray(obj) ? obj : [];
        // };
        // const tickElapsedQuery = db.prepare(`
            // SELECT * FROM events
            // WHERE timestamp < ?
            // AND type = 'tick'
        // `);
        // eventFns.tickElapsed = () => {
            // const obj = tickElapsedQuery.all((new Date()).toISOString());
            // return Array.isArray(obj) ? obj : [];
        // };
        // // getByCallback
        // // unused
        // // const tickPendingQuery = db.prepare(`
        // //     SELECT * FROM events
        // //     WHERE type = "tick"
        // //     AND callback = ?
        // // `);
        // // eventFns.tickPending = (callback = '') => {
        // //     const obj = tickPendingQuery.all(callback);
        // //     return Array.isArray(obj) ? obj : [];
        // // };
        // // const speakPendingQuery = db.prepare(`
        // //     SELECT * FROM events
        // //     WHERE type = "speak"
        // //     AND callback = ?
        // // `);
        // // eventFns.speakPending = (callback = '') => {
        // //     const obj = speakPendingQuery.all(callback);
        // //     return Array.isArray(obj) ? obj : [];
        // // };
        // const deleteQuery = db.prepare(`
            // DELETE FROM events WHERE idx = ?
        // `);
        // eventFns.delete = (idx) => {
            // return deleteQuery.run(idx);
        // };

        // const eventFactory = (msgData) => {
            // const addEvent = (type, { callback, time = new Date(), message = '', target = '' }) => {
            //     if (String(message).length > 400) {
            //         throw new Error('Store size limit is 400');
            //     }
            //     if (['speak', 'tick'].includes(type)) {
            //         const fixedTarget = type == 'tick'
            //             ? (msgData.isPM ? msgData.from : msgData.target)
            //             : target;
            //         return eventInsertQuery.run(
            //             callback,
            //             type,
            //             time.toISOString(),
            //             (new Date()).toISOString(),
            //             msgData.from,
            //             fixedTarget,
            //             message,
            //         );
            //     }
            // };

            // return { addEvent, ...eventFns };
        // };
console.log('test');

        // check tick events that have elapsed
        // this.tick = () => {
        //     setTimeout(this.tick, 1000);
        //     if (this.registered) {
        //         this.database.eventFns.tickElapsed()
        //             .forEach(row => {
        //                 const msgData = {
        //                     from: row.user,
        //                     to: row.target.toLowerCase(),
        //                     target: row.target.toLowerCase(),
        //                     isPM: row.user.toLowerCase() == row.target.toLowerCase(),
        //                     // text, message
        //                 };
        //                 const { ignoreEvents } = this.getChannelConfig(msgData.to);
        //                 const inChannel = !!Object.entries(this.client.chans)
        //                     .find(([key]) => key.toLowerCase() == msgData.target);

        //                 if (msgData.isPM || (!ignoreEvents && inChannel)) {
        //                     const cmdData = parent.database.commands
        //                         .get(row.callback);
        //                     if (cmdData) {
        //                         const { command, name } = cmdData;
        //                         mod.evaluate({
        //                             script: command,
        //                             msgData,
        //                             node: this,
        //                             event: row,
        //                             command: mod.parseCommand({ text: name })
        //                         });
        //                     }
        //                     this.database.eventFns.delete(row.idx);
        //                 }
        //             });
        //     }
        // };
        // setTimeout(this.tick, 5000);

            // check speak events that have elapsed

            // if (isPM || !this.getChannelConfig(to).ignoreEvents) {
            //     this.database.eventFns.speakElapsed(from)
            //         .forEach(row => {
            //             const cmdData = parent.database.commands.get(row.callback);
            //             if (cmdData) {
            //                 const { command, name } = cmdData;
            //                 mod.evaluate({
            //                     script: command,
            //                     msgData,
            //                     node: this,
            //                     event: row,
            //                     command: mod.parseCommand({ text: name })
            //                 });
            //             }
            //             this.database.eventFns.delete(row.idx);
            //         });
            // }
// happy new year
// s/thing/thing
// IP Address leak

IRC.require() in events allows whitelisting stuff for others
say egg everyday in eggchan

14:07 <+cake^> I should make CuteServ autoreply with the colour of a hex value
CuteServ: question?

IRC.listen('tick', () => {
    print('the time is ' + new Date);
}, { filter: ({ channel }) => channel === '#8bitvape'});

IRC.listen('command', (event) => {
    if (command.root === 'ginger') {
        e.preventDefault();
    }
});

---------

unix style params
PYTHON=$(which python2)

// events//
timeout abstraction for responding cutely to messages
poker2
poker: call check bet raise (show odds)
botcoin
onjoin, onconnect

## = ignore everything
check with buck what different things we can do, s//
19:00 <@nibblrjr> <Kirjava> add joins/parts to events spec (2 hours ago)
19:00 <@nibblrjr> <Kirjava> duck hunt (1 hour ago) quack / fire
19:00 <@nibblrjr> <Kirjava> add web API system for pushing events (7 hours ago)
19:00 <+nibblrjr> <Kirjava> add 'push event' exmaple for finn to events todo list (3 hours ago)
11:00 <+IckleFinn> The two use cases I have is: Send a Photo to TeleNibblr -> post the photo here and Send a standard nibblr command to TeleNibblr -> get back the response

~7s - ~7 is a card
~pokemon [name] (have team, start at 0 ELO)

// TODO //
add help prop in commands for generic help
poker2: monthly reset
secretly log pms
force chart spread based on number of nodes
add sudo commands to docs, talk about modules
pastebin multiline output
~quit message
~help ${IRC.nick} is a wild ... that anyone can edit
character limit / convert to pastebin if over one line
command.deprecated
IRC.lang.{color,plural,quantity}
make repl-only a per channel config (4 hours ago)
use a proxy for the config (!)
https://8bv.jow.moe/i/9b175ef1c68e4d82049ad4dd4c909690.png
combine action / notice / print lineLimit
uno
command rate limiting
IRC.requestLines
FormData URLSearchParams { form }
arcsecond command parser
<kingchris> pls to make stock trading game. everybody starts with a budget of Â£1000 and choose stonks to invest into. use real stonk data for scoring. limit buying and selling to weekly idk? ok thank cool, good talk (2 hours ago)
koth game (you have HP to share around? - damnit bobby)
make reserved/silent configurable
/* IRC.ops() */
update config
module.fetchCached
updateConfig / merge getChannelConfig and .get -> expose lineLimit
IRC.runCommand -> make roll7 return something for bet7
~poll editor vim
blackjack
roulette
IRC.commandFns.delete|lock|star -> uses sudo
command.pasteTo pasteFrom
command.add
fix function + method inspect
node.updateConfig
IRC.sudo().evalAsCommand
command autocorrect
secret commands
nick/hash hash should wrap a full piece of text and nick should auto brackets and take more options
provide a message when downloading from npm
~chess
add print limit to get envinronment to limit event callback spam
_.deburr for title parser
useState/loadObject() alternative
comandFns.where();
~pipe
multiple triggers
tinyurl the url (crc32)
specify regex for command name
set request content type url bug https://arin.ga/BXMkyl
strip only starred commands for github ?
provide a toQueryString / URLSearchParams
truncate log messages (or also how nibblr saves itself to log)


// stats //
https://i.imgur.com/n0rIWIO.png
http://buffy.myrealm.co.uk/afsmg/stats/
http://www.df7cb.de/irc/pisg/pisg-month.html
https://chanstat.net/stats/rizon/%23homescreen
https://sourceforge.net/p/pisg/code/ci/master/tree/pisg/modules/Pisg/Parser/Logfile.pm#l582
https://github.com/miknight/pisg/blob/615758a8611c832b1cf730061f965362d95f415f/lang.txt
kick / death ratio
topics

join part vs activity

activity: do a multiline chart with hover over messages

user stats
URL linkers
richest
21:03 <eyeoh> what about pisg
21:03 <eyeoh> http://pisg.sourceforge.net/examples
21:04 <+nibblrjr> >> pisg - Perl IRC Statistics Generator :: Examples
21:04 <mordini> swear i thought you typoed pigs
21:05 <mordini> http://aurora.bot.free.fr/Stats/eloosmotus-FR.html
21:05 <+nibblrjr> >> #EloosMotus @ Rï¿½seau Europnet - stats par Zephir
21:05 <mordini> haven't seen a page like that in a while
21:05 <+IckleFinn> I hope you are writing this down then
21:06 <+IckleFinn> Would love a count of swearwords as well
21:06 <+IckleFinn> Most swearing person
21:08 <+IckleFinn> You are going to do the lurker club?
21:08 <+Kirjava> the what
21:08 <+IckleFinn> longest time online without message
21:17 <+IckleFinn> Kirjava: You going to make a heatmap for activity based on time?
10:56 <nibblrjr1> <Kirjava> track nick changes stats with nibblr (also maybe use it to work out nick groups (1 day ago)
swears

18:39 <&cr0sis> showed you graphically with stronger and more frequent lines who spoke to who
18:40 <&cr0sis> also how about people who use the same words, and also people who use the same words that are also unique to those people

====

~pipe e hello | rainbow
~poll event.tick
~matrix(7)1 - command parse bug
~commands.*
~print(){r}hello
http://passpigs.tripod.com/prob.html
getDOM('https://apps.timwhitlock.info/unicode/inspect?s='+encodeURIComponent('â¢')).then(dom => { print(dom.qs('#inspect tbody').textContent.replace(/\s+/g,' ')) }).catch(print.log);
https://github.com/4chan/4chan-API
trivia() { // http://opentdb.com/api.php?amount=10
mdn
memo.pending
ciu
https://stackoverflow.com/questions/29478751/how-to-cancel-an-emcascript6-vanilla-javascript-promise-chain

// WEB API
test command
test parse command
// dispatch message on print
// join new channels/servers
// track nick list

// UI
// subcommands / tree
only web ui can kick/part/join
// db web backup zip
database explorer
