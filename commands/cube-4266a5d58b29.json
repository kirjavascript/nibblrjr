{
    "event": false,
    "locked": false,
    "starred": false,
    "name": "cube",
    "command": "\nconst centres = [\n    // U B R F L D\n    { color: 0, axis: 'y', offset: -1 },\n    { color: 1, axis: 'z', offset: -1 },\n    { color: 2, axis: 'x', offset: 1 },\n    { color: 3, axis: 'z', offset: 1 },\n    { color: 4, axis: 'x', offset: -1 },\n    { color: 5, axis: 'y', offset: 1 },\n];\n\nconst edges = [\n    // UB UR UF UL\n    [ { color: 1, axis: 'z', offset: -1 }, { color: 0, axis: 'y', offset: -1 } ],\n    [ { color: 2, axis: 'x', offset: 1 }, { color: 0, axis: 'y', offset: -1 } ],\n    [ { color: 3, axis: 'z', offset: 1 }, { color: 0, axis: 'y', offset: -1 } ],\n    [ { color: 4, axis: 'x', offset: -1 }, { color: 0, axis: 'y', offset: -1 } ],\n    // BR FR FL BL\n    [ { color: 2, axis: 'x', offset: 1 }, { color: 1, axis: 'z', offset: -1 } ],\n    [ { color: 2, axis: 'x', offset: 1 }, { color: 3, axis: 'z', offset: 1 } ],\n    [ { color: 4, axis: 'x', offset: -1 }, { color: 3, axis: 'z', offset: 1 } ],\n    [ { color: 4, axis: 'x', offset: -1 }, { color: 1, axis: 'z', offset: -1 } ],\n    // DB DR DF DL\n    [ { color: 1, axis: 'z', offset: -1 }, { color: 5, axis: 'y', offset: 1 } ],\n    [ { color: 2, axis: 'x', offset: 1 }, { color: 5, axis: 'y', offset: 1 } ],\n    [ { color: 3, axis: 'z', offset: 1 }, { color: 5, axis: 'y', offset: 1 } ],\n    [ { color: 4, axis: 'x', offset: -1 }, { color: 5, axis: 'y', offset: 1 } ],\n];\n\nconst corners = [\n    // UBR URF UFL ULB\n    [\n        { color: 2, axis: 'x', offset: 1 },\n        { color: 0, axis: 'y', offset: -1 },\n        { color: 1, axis: 'z', offset: -1 },\n    ],\n    [\n        { color: 2, axis: 'x', offset: 1 },\n        { color: 0, axis: 'y', offset: -1 },\n        { color: 3, axis: 'z', offset: 1 },\n    ],\n    [\n        { color: 4, axis: 'x', offset: -1 },\n        { color: 0, axis: 'y', offset: -1 },\n        { color: 3, axis: 'z', offset: 1 },\n    ],\n    [\n        { color: 4, axis: 'x', offset: -1 },\n        { color: 0, axis: 'y', offset: -1 },\n        { color: 1, axis: 'z', offset: -1 },\n    ],\n    // DRB DFR DLF DBL\n    [\n        { color: 2, axis: 'x', offset: 1 },\n        { color: 5, axis: 'y', offset: 1 },\n        { color: 1, axis: 'z', offset: -1 },\n    ],\n    [\n        { color: 2, axis: 'x', offset: 1 },\n        { color: 5, axis: 'y', offset: 1 },\n        { color: 3, axis: 'z', offset: 1 },\n    ],\n    [\n        { color: 4, axis: 'x', offset: -1 },\n        { color: 5, axis: 'y', offset: 1 },\n        { color: 3, axis: 'z', offset: 1 },\n    ],\n    [\n        { color: 4, axis: 'x', offset: -1 },\n        { color: 5, axis: 'y', offset: 1 },\n        { color: 1, axis: 'z', offset: -1 },\n    ],\n];\n\nconst colors = 'wbrgoy';\n\nfunction sticker(obj) {\n    return `{${colors[obj.color]}}██{/}`;//■ \n}\n\nfunction render() {\n    print([\n        [sticker(corners[3][0]),sticker(corners[3][1]),sticker(edges[0][1]),sticker(corners[0][1]),sticker(corners[0][0])].join``,\n        [sticker(edges[3][0]),sticker(edges[3][1]),sticker(centres[0]),sticker(edges[1][1]),sticker(edges[1][0])].join``,\n        [sticker(corners[2][0]),sticker(corners[2][1]),sticker(edges[2][1]),sticker(corners[1][1]),sticker(corners[1][0])].join``,\n        [sticker(corners[2][0]),sticker(corners[2][2]),sticker(edges[2][0]),sticker(corners[1][2]),sticker(corners[1][0])].join``,\n        [sticker(edges[6][0]),sticker(edges[6][1]),sticker(centres[3]),sticker(edges[5][1]),sticker(edges[5][0])].join``,\n        [sticker(corners[6][0]),sticker(corners[6][2]),sticker(edges[0xA][0]),sticker(corners[5][2]),sticker(corners[5][0])].join``,\n    ].join`\\n`)\n}\n\nconst cube = {\n    edges,\n    corners,\n    centres,\n};\n\n\n// U B R F L D\nconst moveList = {\n    R: {\n        edges: [5, 9, 4, 1],\n        corners: [5, 4, 0, 1],\n        centre: 2,\n        axis: 'x',\n    },\n    U: {\n        edges: [3, 2, 1, 0],\n        corners: [3, 2, 1, 0],\n        centre: 0,\n        axis: 'y',\n    },\n    F: {\n        edges: [6, 10, 5, 2],\n        corners: [1, 2, 6, 5],\n        centre: 3,\n        axis: 'z',\n    },\n    L: {\n        edges: [3, 7, 11, 6],\n        corners: [2, 3, 7, 6],\n        centre: 4,\n        axis: 'x',\n        axisFlip: true,\n    },\n    B: {\n        edges: [4, 8, 7, 0],\n        corners: [4, 7, 3, 0],\n        centre: 1,\n        axis: 'z',\n        axisFlip: true,\n    },\n    D: {\n        edges: [8, 9, 10, 11],\n        corners: [4, 5, 6, 7],\n        centre: 5,\n        axis: 'y',\n        axisFlip: true,\n    },\n    M: {\n        centres: [0, 1, 5, 3],\n        edges: [2, 0, 8, 10],\n        axis: 'x',\n        axisFlip: true,\n    },\n    E: {\n        centres: [3, 4, 1, 2],\n        edges: [4, 5, 6, 7],\n        axis: 'y',\n        axisFlip: true,\n    },\n    S: {\n        centres: [4, 5, 2, 0],\n        edges: [3, 11, 9, 1],\n        axis: 'z',\n    },\n    r: { moves: [toObject(`R`), toObject(`M'`)] },\n    l: { moves: [toObject(`L`), toObject(`M`)] },\n    f: { moves: [toObject(`F`), toObject(`S`)] },\n    b: { moves: [toObject(`B`), toObject(`S'`)] },\n    u: { moves: [toObject(`U`), toObject(`E'`)] },\n    d: { moves: [toObject(`D`), toObject(`E`)] },\n    x: { moves: [toObject(`R`), toObject(`M'`), toObject(`L'`)] },\n    y: { moves: [toObject(`U`), toObject(`E'`), toObject(`D'`)] },\n    z: { moves: [toObject(`F`), toObject(`S`), toObject(`B'`)] },\n};\n\nfunction getMove(moveRaw) {\n    const { move, order } = toObject(moveRaw);\n    if (!moveList[move]) throw new Error(`invalid move ${move}`);\n    const {\n        corners,\n        edges,\n        centres,\n        centre,\n        axis,\n        axisFlip,\n        moves,\n    } = moveList[move];\n\n    // calculate transforms\n    const transforms = [];\n    corners && transforms.push(...corners.map(index => cube.corners[index]));\n    edges && transforms.push(...edges.map(index => cube.edges[index]));\n    centres && transforms.push(...centres.map(index => cube.centres[index]));\n    typeof centre !== 'undefined' && transforms.push(cube.centres[centre]);\n    const axisOrder = axisFlip ? -1 : 1;\n    const extraMoves = moves && (\n        moves.map(move => getMove(applyOrder(clone(move), order), cube))\n    );\n\n    // swap stickers / clean up move\n    function apply() {\n        extraMoves && extraMoves.forEach(move => move.apply());\n        if (edges) {\n            doCycle(cube.edges, order, edges, centres ? 'z' : axis);\n        }\n        if (centres) {\n            doCycle(cube.centres, order, centres);\n        }\n        if (corners) {\n            doCycle(cube.corners, order, corners, axis);\n        }\n    }\n\n    return {\n        apply,\n        transforms,\n        axis,\n        source: { move, order },\n    };\n}\n\nfunction getMoves(moves, cube) {\n    return splitMoves(moves).map(move => getMove(move, cube));\n}\n\nfunction splitMoves(str) {\n    if (typeof str !== 'string') return str;\n    return str.split(/(\\ww?\\d?'?)/).filter(d => d.trim());\n}\n\nfunction toObject(move) {\n    if (typeof move !== 'string') return move;\n    if (move[1] === 'w') move = `${move[0].toLowerCase()}${move.slice(2) || ''}`;\n    return {\n        move: move[0],\n        order: {\n            '\\'': -1,\n            '2\\'': -2,\n            '2': 2,\n        }[move.slice(1)] || 1,\n    };\n}\n\nfunction clone(move) {\n    return Object.assign({}, move);\n}\n\nfunction applyOrder(move, order) {\n    if (order === 1) return move;\n    if (order === -1) {\n        move.order = move.order === 2 ? 2 : -move.order;\n    }\n    if (order === 2) {\n        move.order = move.order === 2 ? 0 : 2;\n    }\n    return move;\n}\n\n\nconst cornerSwaps = {\n    x: [1, 2],\n    y: [0, 2],\n    z: [0, 1],\n};\n\nfunction doCycle(arr, order, cycle, axis) {\n    if (order === 0) return;\n    if (order === -1 || order === 3) {\n        cycle = [...cycle].reverse();\n    }\n    if (order === 2 || order === -2) {\n        doCycle(arr, 1, cycle, axis);\n    }\n\n    // cycles\n    for (let i = 0; i < cycle.length - 1; i++) {\n        swap(arr, cycle[i], cycle[i + 1]);\n    }\n\n    // corner 'twists'\n    if (arr[0].length === 3) {\n        for (let i = 0; i < cycle.length; i++) {\n            swap(arr[cycle[i]], ...cornerSwaps[axis]);\n        }\n    }\n    // edge flips\n    else if (axis === 'z') {\n        for (let i = 0; i < cycle.length; i++) {\n            swap(arr[cycle[i]], 0, 1);\n        }\n    }\n}\n\nfunction swap(arr, first, second) {\n    const tmp = arr[first];\n    arr[first] = arr[second];\n    arr[second] = tmp;\n}\n\n\ngetMoves(input).forEach(move => move.apply());\n\nrender();"
}