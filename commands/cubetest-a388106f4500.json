{
    "event": false,
    "locked": false,
    "starred": false,
    "name": "cubetest",
    "command": "// TODO: axis / offset can be derived from color\n\nconst centres = [\n    // U B R F L D\n    { color: 0, axis: 'y', offset: -1 },\n    { color: 1, axis: 'z', offset: -1 },\n    { color: 2, axis: 'x', offset: 1 },\n    { color: 3, axis: 'z', offset: 1 },\n    { color: 4, axis: 'x', offset: -1 },\n    { color: 5, axis: 'y', offset: 1 },\n];\n\nconst edges = [\n    // UB UR UF UL\n    [ { color: 1, axis: 'z', offset: -1 }, { color: 0, axis: 'y', offset: -1 } ],\n    [ { color: 2, axis: 'x', offset: 1 }, { color: 0, axis: 'y', offset: -1 } ],\n    [ { color: 3, axis: 'z', offset: 1 }, { color: 0, axis: 'y', offset: -1 } ],\n    [ { color: 4, axis: 'x', offset: -1 }, { color: 0, axis: 'y', offset: -1 } ],\n    // BR FR FL BL\n    [ { color: 2, axis: 'x', offset: 1 }, { color: 1, axis: 'z', offset: -1 } ],\n    [ { color: 2, axis: 'x', offset: 1 }, { color: 3, axis: 'z', offset: 1 } ],\n    [ { color: 4, axis: 'x', offset: -1 }, { color: 3, axis: 'z', offset: 1 } ],\n    [ { color: 4, axis: 'x', offset: -1 }, { color: 1, axis: 'z', offset: -1 } ],\n    // DB DR DF DL\n    [ { color: 1, axis: 'z', offset: -1 }, { color: 5, axis: 'y', offset: 1 } ],\n    [ { color: 2, axis: 'x', offset: 1 }, { color: 5, axis: 'y', offset: 1 } ],\n    [ { color: 3, axis: 'z', offset: 1 }, { color: 5, axis: 'y', offset: 1 } ],\n    [ { color: 4, axis: 'x', offset: -1 }, { color: 5, axis: 'y', offset: 1 } ],\n];\n\nconst corners = [\n    // UBR URF UFL ULB\n    [\n        { color: 2, axis: 'x', offset: 1 },\n        { color: 0, axis: 'y', offset: -1 },\n        { color: 1, axis: 'z', offset: -1 },\n    ],\n    [\n        { color: 2, axis: 'x', offset: 1 },\n        { color: 0, axis: 'y', offset: -1 },\n        { color: 3, axis: 'z', offset: 1 },\n    ],\n    [\n        { color: 4, axis: 'x', offset: -1 },\n        { color: 0, axis: 'y', offset: -1 },\n        { color: 3, axis: 'z', offset: 1 },\n    ],\n    [\n        { color: 4, axis: 'x', offset: -1 },\n        { color: 0, axis: 'y', offset: -1 },\n        { color: 1, axis: 'z', offset: -1 },\n    ],\n    // DRB DFR DLF DBL\n    [\n        { color: 2, axis: 'x', offset: 1 },\n        { color: 5, axis: 'y', offset: 1 },\n        { color: 1, axis: 'z', offset: -1 },\n    ],\n    [\n        { color: 2, axis: 'x', offset: 1 },\n        { color: 5, axis: 'y', offset: 1 },\n        { color: 3, axis: 'z', offset: 1 },\n    ],\n    [\n        { color: 4, axis: 'x', offset: -1 },\n        { color: 5, axis: 'y', offset: 1 },\n        { color: 3, axis: 'z', offset: 1 },\n    ],\n    [\n        { color: 4, axis: 'x', offset: -1 },\n        { color: 5, axis: 'y', offset: 1 },\n        { color: 1, axis: 'z', offset: -1 },\n    ],\n];\n\nconst cube = {\n    edges,\n    corners,\n    centres,\n};\n\n// U B R F L D\nconst moveList = {\n    R: {\n        edges: [5, 9, 4, 1],\n        corners: [5, 4, 0, 1],\n        centre: 2,\n        axis: 'x',\n    },\n    U: {\n        edges: [3, 2, 1, 0],\n        corners: [3, 2, 1, 0],\n        centre: 0,\n        axis: 'y',\n    },\n    F: {\n        edges: [6, 10, 5, 2],\n        corners: [1, 2, 6, 5],\n        centre: 3,\n        axis: 'z',\n    },\n    L: {\n        edges: [3, 7, 11, 6],\n        corners: [2, 3, 7, 6],\n        centre: 4,\n        axis: 'x',\n        axisFlip: true,\n    },\n    B: {\n        edges: [4, 8, 7, 0],\n        corners: [4, 7, 3, 0],\n        centre: 1,\n        axis: 'z',\n        axisFlip: true,\n    },\n    D: {\n        edges: [8, 9, 10, 11],\n        corners: [4, 5, 6, 7],\n        centre: 5,\n        axis: 'y',\n        axisFlip: true,\n    },\n    M: {\n        centres: [0, 1, 5, 3],\n        edges: [2, 0, 8, 10],\n        axis: 'x',\n        axisFlip: true,\n    },\n    E: {\n        centres: [3, 4, 1, 2],\n        edges: [4, 5, 6, 7],\n        axis: 'y',\n        axisFlip: true,\n    },\n    S: {\n        centres: [4, 5, 2, 0],\n        edges: [3, 11, 9, 1],\n        axis: 'z',\n    },\n    r: { moves: [toObject(`R`), toObject(`M'`)] },\n    l: { moves: [toObject(`L`), toObject(`M`)] },\n    f: { moves: [toObject(`F`), toObject(`S`)] },\n    b: { moves: [toObject(`B`), toObject(`S'`)] },\n    u: { moves: [toObject(`U`), toObject(`E'`)] },\n    d: { moves: [toObject(`D`), toObject(`E`)] },\n    x: { moves: [toObject(`R`), toObject(`M'`), toObject(`L'`)] },\n    y: { moves: [toObject(`U`), toObject(`E'`), toObject(`D'`)] },\n    z: { moves: [toObject(`F`), toObject(`S`), toObject(`B'`)] },\n};\n\nfunction getMove(moveRaw) {\n    const { move, order } = toObject(moveRaw);\n    if (!moveList[move]) throw new Error(`invalid move ${move}`);\n    const {\n        corners,\n        edges,\n        centres,\n        centre,\n        axis,\n        axisFlip,\n        moves,\n    } = moveList[move];\n\n    // calculate transforms\n    const transforms = [];\n    corners && transforms.push(...corners.map(index => cube.corners[index]));\n    edges && transforms.push(...edges.map(index => cube.edges[index]));\n    centres && transforms.push(...centres.map(index => cube.centres[index]));\n    typeof centre !== 'undefined' && transforms.push(cube.centres[centre]);\n    const axisOrder = axisFlip ? -1 : 1;\n    const extraMoves = moves && (\n        moves.map(move => getMove(applyOrder(clone(move), order), cube))\n    );\n\n    // swap stickers / clean up move\n    function apply() {\n        extraMoves && extraMoves.forEach(move => move.apply());\n        if (edges) {\n            doCycle(cube.edges, order, edges, centres ? 'z' : axis);\n        }\n        if (centres) {\n            doCycle(cube.centres, order, centres);\n        }\n        if (corners) {\n            doCycle(cube.corners, order, corners, axis);\n        }\n    }\n\n    return {\n        apply,\n        transforms,\n        axis,\n        source: { move, order },\n    };\n}\n\nfunction getMoves(moves) {\n    return splitMoves(moves).map(move => getMove(move, cube));\n}\n\nfunction splitMoves(str) {\n    if (typeof str !== 'string') return str;\n    return str.split(/(\\ww?\\d?'?)/).filter(d => d.trim());\n}\n\nfunction toObject(move) {\n    if (typeof move !== 'string') return move;\n    if (move[1] === 'w') move = `${move[0].toLowerCase()}${move.slice(2) || ''}`;\n    return {\n        move: move[0],\n        order: {\n            '\\'': -1,\n            '2\\'': -2,\n            '2': 2,\n        }[move.slice(1)] || 1,\n    };\n}\n\nfunction clone(move) {\n    return Object.assign({}, move);\n}\n\nfunction applyOrder(move, order) {\n    if (order === 1) return move;\n    if (order === -1) {\n        move.order = move.order === 2 ? 2 : -move.order;\n    }\n    if (order === 2) {\n        move.order = move.order === 2 ? 0 : 2;\n    }\n    return move;\n}\n\n\nconst cornerSwaps = {\n    x: [1, 2],\n    y: [0, 2],\n    z: [0, 1],\n};\n\nfunction doCycle(arr, order, cycle, axis) {\n    if (order === 0) return;\n    if (order === -1 || order === 3) {\n        cycle = [...cycle].reverse();\n    }\n    if (order === 2 || order === -2) {\n        doCycle(arr, 1, cycle, axis);\n    }\n\n    // cycles\n    for (let i = 0; i < cycle.length - 1; i++) {\n        swapPiece(arr, cycle[i], cycle[i + 1]);\n    }\n\n    // corner 'twists'\n    if (arr[0].length === 3) {\n        for (let i = 0; i < cycle.length; i++) {\n            swapSticker(arr[cycle[i]], ...cornerSwaps[axis]);\n        }\n    }\n    // edge flips\n    else if (axis === 'z') {\n        for (let i = 0; i < cycle.length; i++) {\n            swapSticker(arr[cycle[i]], 0, 1);\n        }\n    }\n}\n\nfunction swapPiece(arr, first, second) {\n    if (Array.isArray(arr[first])) {\n        const tmpColors = arr[first].map(d => d.color);\n        arr[first].forEach((sticker, i) => { sticker.color = arr[second][i].color; });\n        arr[second].forEach((sticker, i) => { sticker.color = tmpColors[i]; });\n    } else {\n        swapSticker(arr, first, second)\n    }\n}\n\nfunction swapSticker(arr, first, second) {\n    const tmp = arr[first].color;\n    arr[first].color = arr[second].color;\n    arr[second].color = tmp;\n}\n\nfunction isSolved() {\n    const { centres, edges, corners } = cube;\n    const lookup = {};\n    centres.forEach(({ color, axis, offset }) => {\n        lookup[`${axis}|${offset}`] = color;\n    });\n    const pieces = edges.concat(corners);\n    for (let i = 0; i < pieces.length; i++) {\n        for (let j = 0; j < pieces[i].length; j++) {\n            const { axis, offset, color } = pieces[i][j];\n            if (color !== lookup[`${axis}|${offset}`]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\n// IRC stuff\n\nconst { from } = IRC.message;\n\nfunction saveCube() {\n    store.set(from, JSON.stringify(cube));\n}\n\nfunction loadCube() {\n    const next = store.get(from);\n    if (next) {\n        Object.assign(cube, JSON.parse(next));\n    }\n}\n\nfunction doMoves(moves) {\n    getMoves(moves).forEach(move => move.apply());\n}\n\n// render\n\nconst colors = 'wbrgoy';\n\nfunction renderNormal(message = '') {\n    function sticker(obj) {\n        return colors[obj.color];\n    }\n  \n    function crnr(x, y) {\n      return sticker(cube.corners[x][y]);\n    }\n  \n  \tfunction edge(x, y) {\n      return sticker(cube.edges[x][y]);\n    }\n  \n    function cntr(x) {\n      return sticker(cube.centres[x]);\n    }\n  \n    function crunch(l1, l2) {\n      return l1.map((d, i) => `{${d},${l2[i]}}▀{/}`).join``;\n    }\n  \n    function crunch1(l) {\n      return l.map(d => `{${d}}▄{/}`).join``;\n    }\n\n    const spaces = \"   \";\n    print([\n        spaces + crunch([crnr(3,1), edge(0,1), crnr(0,1)], [edge(3,1), cntr(0), edge(1,1)]) + ` ${message}`,\n        crunch1([crnr(3,0), edge(3,0), crnr(2,0)])\n          + crunch([crnr(2,1), edge(2,1), crnr(1,1)], [crnr(2,2), edge(2,0),  crnr(1,2)])\n          + crunch1([crnr(1,0), edge(1,0), crnr(0,0)]),\n        crunch([edge(7,0), cntr(4), edge(6,0), edge(6,1), cntr(3), edge(5,1), edge(5,0), cntr(2), edge(4,0)],\n          [crnr(7,0), edge(11,0), crnr(6,0), crnr(6,2), edge(10,0), crnr(5,2), crnr(5,0), edge(9,0), crnr(4,0)])\n    ].join`\\n`)\n}\n\nfunction renderMini(message = '') {\n    function sticker(obj) {\n        return colors[obj.color]; \n    }\n    function crunch([l1, l2]) {\n        return l1.map((d, i) => `{${d},${l2[i]}}▀{/}`).join``;\n    }\n    print([\n        crunch([[sticker(cube.corners[3][0]),sticker(cube.corners[3][1]),sticker(cube.edges[0][1]),sticker(cube.corners[0][1]),sticker(cube.corners[0][0])],\n        [sticker(cube.edges[3][0]),sticker(cube.edges[3][1]),sticker(cube.centres[0]),sticker(cube.edges[1][1]),sticker(cube.edges[1][0])]]) + ` ${message}`,\n        crunch([[sticker(cube.corners[2][0]),sticker(cube.corners[2][1]),sticker(cube.edges[2][1]),sticker(cube.corners[1][1]),sticker(cube.corners[1][0])],\n        [sticker(cube.corners[2][0]),sticker(cube.corners[2][2]),sticker(cube.edges[2][0]),sticker(cube.corners[1][2]),sticker(cube.corners[1][0])]]),\n        crunch([[sticker(cube.edges[6][0]),sticker(cube.edges[6][1]),sticker(cube.centres[3]),sticker(cube.edges[5][1]),sticker(cube.edges[5][0])],\n        [sticker(cube.corners[6][0]),sticker(cube.corners[6][2]),sticker(cube.edges[0xA][0]),sticker(cube.corners[5][2]),sticker(cube.corners[5][0])]]),\n    ].join`\\n`)\n}\n\n\nfunction mini() {\n    doMoves(input);\n    renderMini();\n}\n\nfunction view(view) {\n    if (!view) {\n        throw `usage: ${IRC.colors.cmd('cube.view', 'mini|normal')}`;\n    }\n    store.set(`${from}:view`, view);\n    print(`Size for ${from} set to ${view}`);\n}\n\nfunction render(message) {\n    if (store.get(`${from}:view`) === 'mini') {\n        renderMini(message);\n    } else {\n        renderNormal(message);\n    }\n}\n\n// solving / scramble / timer\n\nconst scrambler = IRC.require('scramble');\n\nfunction scramble(type) {\n    type = type.toUpperCase().trim();\n    !['LL', 'LSE', 'TEST'].includes(type) && (type = '3x3');\n\n    const scramble = {\n        TEST: `RU`,\n        LL: scrambler.getLLScramble(),\n        LSE: `xy'` + scrambler.getLSEScramble() + ['', ' M2'][0|Math.random()*2],\n    }[type] || (() => scrambler.getRandomScramble())();\n\n    doMoves(scramble);\n\n    store.save(`${from}:solve`, {\n        moves: [],\n        scrambleTime: +(new Date),\n        startTime: undefined,\n        endTime: undefined,\n        scramble,\n        type,\n    });\n\n    saveCube();\n    render(`${type} scramble`);\n}\n\nconst { intervalToDuration } = require('date-fns@2.28.0');\n\nfunction apply(inputMoves) {\n    loadCube();\n    doMoves(inputMoves);\n    saveCube();\n\n    const state = store.load(`${from}:solve`, false);\n    let message;\n    if (state) {\n        let { moves, startTime, ...other } = state;\n\n        moves.push([+(new Date), inputMoves, IRC.message.text]);\n\n        if (!startTime) {\n            if (getMoves(inputMoves).some(move => !'xyz'.includes(move.source.move))) {\n                // if there's a non inspection move\n                startTime = +(new Date);\n                message = 'timer started!';\n            }\n        }\n\n        store.save(`${from}:solve`, {\n            moves,\n            startTime,\n            ...other\n        });\n\n\n        if (isSolved()) {\n            endTime = +(new Date);\n            const duration = intervalToDuration({ start: new Date(startTime), end: new Date(endTime) });\n            message = `solved in ${duration.minutes}:${duration.seconds}!`\n\n        }\n// ~cube.solution joey\n// inspection time\n        // scramble, solution\n        // debug flag to see everything\n//  notify of new pb / notify in channel\n\n    }\n\n    render(message);\n}\n\nif (IRC.command.path === 'cubetest') {\n    doMoves(input);\n    render();\n} else {\n    module.exports = { cube, scramble, render, apply, getMoves, doMoves, mini, view };\n}"
}