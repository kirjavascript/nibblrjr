{
    "event": true,
    "locked": true,
    "starred": true,
    "name": "event.fetchURL",
    "command": "const { document, window } = new (jsdom().JSDOM)('');\nconst anchor = document.createElement('a');\nconst bytes = IRC.require('bytes');\n\nfunction setDOM(page) {\n    document.open();\n    document.write(page);\n    document.close();\n};\n\nfunction domTitle() {\n    const metaTitle = document.head.querySelector('meta[name=\"title\"]');\n    return metaTitle ? metaTitle.content : document.title;\n}\n\nconst filterWords = /forbidden|not found|access denied|your browser|rick roll|never gonna give you up/i;\n\nfunction hasInfo(url, _title) {\n    const title = _title.replace(/\\s+/g, ' ').trim();\n    const isFresh = title.split(' ')\n        .filter(word => (\n            !(new RegExp(word.replace(/[^.a-zA-Z0-9\\u00c0-\\u017e]+/g, ''), 'i')).test(url)\n        )).length >= 1;\n    return isFresh && !filterWords.test(title);\n}\n\nIRC.listen('message', event => {\n    if (!IRC.queryConfig('fetchURL', true)) return;\n    const urls = event.message.text.match(/(\\b(https?):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;()]*[-A-Z0-9+&@#\\/%=~_|()])/ig);\n    const fromSelf = event.message.from === IRC.nick;\n    if (!urls || fromSelf || event.message.text.includes('##')) return;\n\n    urls.forEach(url => {\n        handleURL(url)\n            // .catch(print.error);\n    });\n});\n\nasync function handleURL(url) {\n    anchor.setAttribute('href', url);\n    if (await customURL()) return;\n\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'Accept-Language': 'en-GB,en;q=0.5',\n            'Content-Language': 'en-GB,en;q=0.5',\n            'User-Agent': /youtu\\.?be|google|reddit/.test(url) ? '' : 'Googlebot',\n        },\n    });\n\n    const length = res.headers.get('content-length');\n\n    if (length > 5.243e6) {\n        const filename = anchor.pathname.split('/').pop();\n        print.info(`{dc}${filename}{/} ${bytes(length)} {dgr}${res.headers.get('content-type')}{/}`);\n        return;\n    }\n\n    const page = await res.text();\n    setDOM(page);\n\n    const title = domTitle();\n\n    if (title.length < 400 && (IRC.queryConfig('fetchURLAll', false) || hasInfo(url, title))) {\n        print.info(title);\n    }\n\n}\n\nasync function customURL() {\n    if (anchor.hostname.includes('github.')) {\n        if (anchor.pathname.split('/').length === 3) {\n            // it's a repo url\n            const {\n                description,\n                html_url,\n                stargazers_count,\n                language,\n                license, // { name }\n            } = await (\n                await fetch(`https://api.github.com/repos${anchor.pathname}`)\n            ).json();\n\n            print(`{gr}Github#{/} ${description} ${IRC.colors.nick(language, false)} {y}â˜…{/} {bo}${stargazers_count}{/} {dgr}${license ? licence.name : ''}{/}`);\n            return true;\n        }\n        // TODO\n        // https://www.youtube.com/oembed?url=http://www.youtube.com/watch?v=ojCkgU5XGdg&format=json\n        // reddit\n    } \n    if (anchor.hostname.includes('twitter.')) {\n        const id = anchor.pathname.match(/status\\/(\\d+)/);\n        if (id) {\n            const page = await (await fetch(`https://nitter.net/_/status/${id[1]}`)).text();\n            setDOM(page);\n            const name = document.querySelector('.fullname').textContent;\n            const user = document.querySelector('.username').textContent;\n            const tweet = document.querySelector('.tweet-content').textContent;\n            print(`{bo}${name}{/} {c}${user}{/} ${tweet}`);\n        }\n    }\n}"
}