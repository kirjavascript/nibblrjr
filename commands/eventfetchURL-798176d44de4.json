{
    "event": true,
    "locked": true,
    "starred": true,
    "name": "event.fetchURL",
    "command": "const { document, window } = new (jsdom().JSDOM)('');\nconst anchor = document.createElement('a');\nconst bytes = IRC.require('bytes');\n\nfunction setDOM(page) {\n    document.open();\n    document.write(page);\n    document.close();\n};\n\nfunction domTitle() {\n    const metaTitle = document.head.querySelector('meta[name=\"title\"]');\n    return metaTitle ? metaTitle.content : document.title;\n}\n\nconst filterWords = /cloudflare|forbidden|not found|access restricted|access denied|your browser|rick roll|never gonna give you up|log in/i;\n\nfunction hasInfo(url, _title) {\n    const title = _title.replace(/\\s+/g, ' ').trim();\n    const isFresh = title.split(' ')\n        .filter(word => (\n            !(new RegExp(word.replace(/[^.a-zA-Z0-9\\u00c0-\\u017e]+/g, ''), 'i')).test(url)\n        )).length >= 1;\n    return isFresh;\n}\n\nIRC.listen('message', event => {\n    if (!IRC.queryConfig('fetchURL', true)) return;\n    const { text, from } = event.message;\n    const urls = text.match(/(\\b(https?):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;()]*[-A-Z0-9+&@#\\/%=~_|()])/ig);\n    const fromSelf = from === IRC.nick;\n    if (!urls || fromSelf || text.startsWith(IRC.trigger) || text.includes('##')) return;\n\n    urls.slice(0, 2).forEach(url => {\n        handleURL(url, global.print)\n            // .catch(print.error);\n    });\n});\n\nasync function handleURL(url, print) {\n    anchor.setAttribute('href', url);\n    if (await customURL(url, print)) return;\n\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'Accept-Language': 'en-GB,en;q=0.5',\n            'Content-Language': 'en-GB,en;q=0.5',\n            'User-Agent': /youtu\\.?be|google|reddit/.test(url) ? '' : 'Googlebot',\n        },\n    });\n\n    const length = res.headers.get('content-length');\n\n    if (length > 5.243e6) {\n        const filename = anchor.pathname.split('/').pop();\n        print.info(`{dc}${filename}{/} ${bytes(length)} {dgr}${res.headers.get('content-type')}{/}`);\n        return;\n    }\n\n    const page = await res.text();\n    setDOM(page);\n\n    const title = domTitle();\n\n    if (\n      title.length \n      && title.length < 400 \n      && !filterWords.test(title)\n      && (IRC.queryConfig('fetchURLAll', false) || hasInfo(url, title))) {\n        print.info(title);\n    }\n\n}\n\nasync function customURL(url, print) {\n    // https://github.com/mendel5/alternative-front-ends\n    const { hostname, pathname } = anchor;\n    if (hostname.includes('reddit.')) {\n        const jsonURL = url.replace(/(\\/?)(\\?.*)?(#.*)?$/, '/.json');\n        const json = await(await fetch(jsonURL)).json();\n        const data = json?.[0]?.data?.children?.[0]?.data;\n        if (data) {\n            const info = `{c}${data.subreddit_name_prefixed}{/} {o}▲${data.score}{/} ${data.title}`;\n            const url = data?.secure_media?.reddit_video?.fallback_url?.replace('?source=fallback', '') || data.url;\n            if (data.selftext) {\n                print(`${info} ${String(data.selftext).replace(/\\s+/g, ' ').slice(0, 300)}`);\n                return true;\n            } else if (url) {\n                print(`${info} ${IRC.colors.link(url)}`);\n                return true;\n            }\n        }\n        return true; \n    }\n    if (hostname.includes('youtube.') || hostname === 'youtu.be') {\n        try {\n            const json = await (await fetch(`https://www.youtube.com/oembed?url=${encodeURI(url)}&format=json`)).json();\n            const {\n                title, author_name,\n            } = json;\n            print(`{r}YouTube{/} {c}${author_name}{/} ${title}`);\n            return true;\n        } catch (e) { }\n        // url.match(/(?!v=|v\\/|\\.be\\/|watch\\/)([0-9a-z\\-_]{11})/i);\n    }\n    if (hostname.includes('github.')) {\n        if (pathname.split('/').length === 3) {\n            // it's a repo url\n            const {\n                description,\n                html_url,\n                name,\n                stargazers_count,\n                language,\n                license, // { name }\n            } = await (\n                await fetch(`https://api.github.com/repos${pathname}`)\n            ).json();\n\n            print(`{gr}Github{/} ${description || name} ${IRC.colors.nick(language, false)} {y}★{/} {bo}${stargazers_count}{/} {dgr}${license ? license.name : ''}{/}`);\n            return true;\n        }\n    } \n    if (hostname.includes('instagram.')) {\n        // https://git.sr.ht/~cadence/bibliogram-docs/tree/master/docs/Instances.md\n        const id = pathname.match(/\\/([A-Za-z-0-9]{11})/);\n        if (id) {\n            const page = await (await fetch(`https://bibliogram.1d4.us/p/${id[1]}`)).text();\n            setDOM(page);\n            const text = document.querySelector('.structured-text').textContent;\n            const name = document.querySelector('.name').textContent;\n            const image = document.querySelector('.sized-image');\n\n            let output = `{bo}Instagram{/} {c}${name}{/} ${text.replace(/\\s+/g, ' ')}`;\n            print(output);\n        }\n        return true;\n    }\n    if (hostname.includes('twitter.')) {\n        const id = pathname.match(/status\\/(\\d+)/);\n        if (id) {\n            const page = await (await fetch(`https://nitter.net/_/status/${id[1]}#m`)).text();\n            setDOM(page);\n            const maintweet = document.querySelector('.main-tweet');\n            const name = maintweet.querySelector('.fullname').textContent;\n            const user = maintweet.querySelector('.username').textContent;\n            const image = maintweet.querySelector('.still-image img');\n            const tweet = maintweet.querySelector('.tweet-content').textContent.replace(/\\s+/g, ' ');\n            let output = `{bo}${name}{/} {c}${user}{/} ${tweet}`;\n            if (image) {\n                output += ' ' + IRC.colors.link(`https://nitter.net${image.getAttribute('src').replace(/%3Fname.+/, '')}`);\n            }\n            print(output);\n            return true;\n        }\n    }\n    // image detection AI\n    if (['jpg', 'gif', 'jpeg', 'png'].some(d => url.includes(`.${d}`))) {\n        const reqUrl = 'https://api.imagga.com/v2/tags?image_url='+encodeURI(url);\n        const json = await (await fetch(reqUrl, {\n            headers: { Authorization: 'Basic YWNjX2ZjOWJkMjE5ZGQ1NTVjZTpiYmE4MTU1MTUwM2M4N2IxMmJlZTg4YzY1ZmI2YmM0OA== ' }\n        })).json();\n        const tags = json.result.tags.filter(tag => tag.confidence >= 65);\n        if (tags.length) {\n            print('🖼️ 👀 '+tags.map(tag=>`{g}${tag.tag.en}{/}`).join(', '));\n        } else if (json.result.tags.length) {\n          \t//const [tag] = json.result.tags;\n         \t//print(`Image may contain: {o}${tag.tag.en}{/} (${0|tag.confidence}% confidence)`);\n        }\n    }\n}"
}