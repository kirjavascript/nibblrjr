{
    "event": true,
    "locked": true,
    "starred": true,
    "name": "event.fetchURL",
    "command": "const { document, window } = new (jsdom().JSDOM)('');\nconst anchor = document.createElement('a');\nconst bytes = IRC.require('bytes');\nfunction setDOM(page) {\n    document.open();\n    document.write(page);\n    document.close();\n};\n\nfunction domTitle() {\n    const metaTitle = document.head.querySelector('meta[name=\"title\"]');\n    return metaTitle ? metaTitle.content : document.title;\n}\n\nconst filterWords = /something went wrong|cloudflare|forbidden|not found|access restricted|access denied|your browser|rick roll|never gonna give you up|log in|blocked|just a moment|been denied/i;\n\nfunction hasInfo(url, _title) {\n    const title = _title.replace(/\\s+/g, ' ').trim();\n    const isFresh = title.split(' ')\n        .filter(word => (\n            !(new RegExp(word.replace(/[^.a-zA-Z0-9\\u00c0-\\u017e]+/g, ''), 'i')).test(url)\n        )).length >= 1;\n    return isFresh;\n}\n\nconst urlRegex = /((https?):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;()]*[-A-Z0-9+&@#\\/%=~_|()])/ig;\n\nIRC.listen('message', event => {\n    if (!IRC.queryConfig('fetchURL', true)) return;\n    const { text, from } = event.message;\n    const urls = text.match(urlRegex);\n    const fromSelf = from === IRC.nick;\n    if (!urls || fromSelf || text.startsWith(IRC.trigger) || text.includes('##')) return;\n\n    urls.filter((d, i, a) => a.indexOf(d) === i).slice(0, 3).forEach(url => {\n              \thandleURL(url, global.print)\n           \t//.catch(print.error);\n          });\n});\n\nasync function handleURL(url, print) {\n    anchor.setAttribute('href', url);\n    if (await customURL(url, print)) return;\n\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'Accept-Language': 'en-GB,en;q=0.5',\n            'Content-Language': 'en-GB,en;q=0.5',\n            'User-Agent': /youtu\\.?be|google|reddit/.test(url) ? 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31' : 'Googlebot',\n        },\n    });\n\n    const length = res.headers.get('content-length');\n\n    if (length > 5.243e6) {\n        const filename = anchor.pathname.split('/').pop();\n        print.info(`{dc}${filename}{/} ${bytes(length)} {dgr}${res.headers.get('content-type')}{/}`);\n        return;\n    }\n  \n    if (res.headers.get('set-cookie')?.includes('mastodon')) {\n      const id = url.match(/\\d+/);\n      if (id && id[0]) {\n          const toot = await(await fetch(`https://${anchor.hostname}/api/v1/statuses/${id[0]}`)).json();\n          setDOM(toot.content);\n          const textNodes = (function textNodes(node){\n              const nodes = [];\n              for (node=node.firstChild;node;node=node.nextSibling){\n                  if (node.nodeType === 3) nodes.push(node);\n                  else nodes.push(...textNodes(node));\n              }\n              return nodes;\n          })(document.body).map(d=>d.textContent).join(' ');\n\n          let output = `{bo}${toot.account.username}{/}{c}@${anchor.hostname}{/} ${textNodes}`;\n          // let output = `{bo}${toot.account.username}{/}{c}@${anchor.hostname}{/} ${document.body.textContent}`;\n          if (toot.card?.image) {\n              output += ' ' + IRC.colors.link(toot.card.image);\n          }\n          print(output);\n        return;\n      }\n    }\n\n    const page = await res.text();\n    setDOM(page);\n\n    const title = domTitle();\n\n    if (\n      title.length \n      && title.length < 400 \n      && !filterWords.test(title)\n      && (IRC.queryConfig('fetchURLAll', false) || hasInfo(url, title))) {\n        print.info(title);\n    }\n\n}\n\nasync function customURL(url, print) {\n    // https://github.com/mendel5/alternative-front-ends\n    const { hostname, pathname } = anchor;\n    if (hostname.includes('reddit.')) {\n      // TODO https://www.reddit.com/r/Games/s/HmL3Ngl8Cm \n        const jsonURL = url.replace(/(\\/?)(\\?.*)?(#.*)?$/, '/.json');\n        const json = await(await fetch(jsonURL)).json();\n        const data = json?.[0]?.data?.children?.[0]?.data;\n        if (data) {\n            const info = `{c}${data.subreddit_name_prefixed}{/} {o}▲${data.score}{/} ${data.title}`;\n            const url = data?.secure_media?.reddit_video?.fallback_url?.replace('?source=fallback', '') || data.url;\n            if (data.selftext) {\n                print(`${info} ${String(data.selftext).replace(/\\s+/g, ' ').slice(0, 300)}`);\n                return true;\n            } else if (url) {\n                print(`${info} ${IRC.colors.link(url)}`);\n                return true;\n            }\n        }\n        return true; \n    }\n    if (hostname.includes('youtube.') || hostname === 'youtu.be') {\n        try {\n            const json = await (await fetch(`https://www.youtube.com/oembed?url=${encodeURI(url)}&format=json`)).json();\n            const {\n                title, author_name,\n            } = json;\n            print(`{r}YouTube{/} {c}${author_name}{/} ${title}`);\n            return true;\n        } catch (e) { }\n        // url.match(/(?!v=|v\\/|\\.be\\/|watch\\/)([0-9a-z\\-_]{11})/i);\n    }\n    if (hostname.includes('github.com') && !hostname.includes('gist')) {\n        if (pathname.split('/').length === 3) {\n            // it's a repo url\n            const {\n                description,\n                html_url,\n                name,\n                stargazers_count,\n                language,\n                license, // { name }\n            } = await (\n                await fetch(`https://api.github.com/repos${pathname}`)\n            ).json();\n\n            print(`{gr}${description || name}{/} ${language ? IRC.colors.nick(language, false) : ''} {y}★{/} {bo}${stargazers_count}{/} {dgr}${license ? license.name : ''}{/}`);\n            return true;\n        }\n    }\n    if (hostname.includes('www.ebay.')) {\n        setDOM(await(await fetch(anchor.href)).text());\n        const name = document.querySelector('h1')?.textContent || '';\n        const price = document.querySelector('.x-price-primary')?.textContent || '';\n        const approx = document.querySelector('.x-price-approx__price')?.textContent || '';\n        const bidCount = document.querySelector('.x-bid-info .x-bid-count')?.textContent || '';\n        const endTime = document.querySelector('.x-bid-info .x-end-time')?.textContent || '';\n        if (name.trim()) {\n            print(`{bo}{r,bl}e{b,bl}b{y,bl}a{g,bl}y{/} {bo}${name.trim()}{/} {gr}${bidCount}{/} {y}${price}{/} (${approx}) {gr}${endTime}`);\n        }\n        return true;\n    }\n  \tif (hostname.includes('worldcubeassociation.org')) {\n      if (pathname.includes('/persons/')){\n            const {\n              personal_records,\n              person,\n              medals\n            }\n              = await(await fetch(`https://www.worldcubeassociation.org/api/v0/persons/${pathname.split(\"/\")[2]}`)).json();\n            // calculate best rank\n\t\t\tlet best_rank = Infinity\n            let best_event = \"\"\n            // RIP Feet\n            delete personal_records[\"mmagic\"]\n            delete personal_records[\"magic\"]\n        \tdelete personal_records[\"333wf\"]\n       \t\tdelete personal_records[\"333mbo\"]\n            for (const event in personal_records) {\n              if(+personal_records[event][\"single\"][\"world_rank\"] < best_rank){\n                best_rank = personal_records[event][\"single\"][\"world_rank\"]\n                best_event = event + \" Single\"\n              }\n              if(personal_records[event][\"average\"] != undefined && +personal_records[event][\"average\"][\"world_rank\"] < best_rank){\n                best_rank = personal_records[event][\"average\"][\"world_rank\"]\n                best_event = event + \" Average\"\n              }\n            }\n\n          \t\n            let output = `{bo}${person[\"name\"]}{/}, Medals: {y}${medals[\"gold\"]}{/} {gr}${medals[\"silver\"]}{/} {o}${medals[\"bronze\"]}{/}, Best Rank {c}${best_rank}{/} in {y}${best_event}`;\n            print(output);\n          \treturn true;\n      }\n      if (pathname.includes('/competitions/')){\n          const {\n            name,\n            competitor_limit,\n            registration_open,\n            registration_close  \n          } = await (\n              await fetch(`https://www.worldcubeassociation.org/api/v0/competitions/${pathname.split('/')[2]}`)\n          ).json();\n        // Add checks for comps in the past. \n            let output = `{bo}${name}{/}  (Limit: ${competitor_limit}), Registration: {c}${registration_open.split(\"T\")[0]}{/} - {c}${registration_close.split(\"T\")[0]}{/}`;\n            print(output);\n         \treturn true;\n      }\n      return false;\n    }\n    if (hostname.includes('twitter.') || hostname.includes('x.com')) {\n        const id = pathname.match(/status\\/(\\d+)/);\n        if (id) {\n            const url = `https://api.vxtwitter.com/_/status/${id}`;\n\n            const { \n                likes,\n                date: _date,\n                mediaURLs, // []\n                text,\n                user_screen_name: name,\n            } = fetchSync.json(url, { headers: { 'User-Agent': 'TelegramBot (like TwitterBot)' } });\n\n            const links = mediaURLs.map(IRC.colors.link).join(`, `);\n\n            const output = `{bo}${name}{/} {c}👍${likes}{/} ${text.replace(/\\s+/g, \" \").slice(0, 390)}\\n${links}`.trim();\n\n            print(output);\n            return true\n        }\n    }\n    // image detection AI\n    if (['jpg', 'gif', 'jpeg', 'png'].some(d => url.includes(`.${d}`))) {\n        const reqUrl = 'https://api.imagga.com/v2/tags?image_url='+encodeURI(url);\n        const json = await (await fetch(reqUrl, {\n            headers: { Authorization: `Basic ${IRC.queryConfig('imaggaKey')} ` }\n        })).json();\n        if (json.status.type === 'error') {\n          \tjson.status.text;\n        } else if (json.result.tags) {\n                  const tags = json.result.tags.filter(tag => tag.confidence >= 70);\n        \tif (tags.length) {\n            \tprint('🖼 👀 '+tags.map(tag=>`{g}${tag.tag.en}{/}`).join(', '));\n        \t} else if (json.result.tags.length) {\n          \t\t//const [tag] = json.result.tags;\n              //print(`Image may contain: {o}${tag.tag.en}{/} (${0|tag.confidence}% confidence)`);\n        \t}\n        }\n\n      \treturn true;\n    }\n    // repaste pastebin\n    if (hostname.includes('pastebin.com')) {\n        const id = pathname.match(/\\/(\\w+)\\/?$/);\n        if (id) {\n            const page = await (await fetch(`https://pastebin.com/raw/${id[1]}`)).text();\n            print.info(`repasted to ${await IRC.require('module.paste').async(page)}`)\n            return true;\n        }\n    }\n}"
}