{
    "event": false,
    "locked": false,
    "starred": false,
    "name": "event.memo",
    "command": "IRC.listen('message', ({ target, server, message: { from, isPM, text } }) => {\n    if (text.startsWith(IRC.trigger)) return;\n\n    const print = globalThis.print;\n    IRC.setNamespace('memo');\n    SQL.async.many`\n        SELECT \"from\", \"to\", time, message FROM memo \n        WHERE LOWER(\"to\") = LOWER(${from})\n        AND server = ${server}\n        AND (${String(+isPM)} OR channel = ${target} OR channel IS NULL) \n    `.then((messages) => {\n        if (messages.length === 1) {\n            const msg = messages[0];\n            print(`${msg.to}: ${IRC.colors.nick(msg.from, true)} ${msg.message}`);\n        } else if (messages.length > 1) {\n            const list = messages.map(({ from, message, time }) => `${time} <${from}> ${message}`).join('\\n');\n            IRC.require('module.paste').async(list)\n                .then(url => {\n                    print(`${from}: you have {o}${messages.length}{/} messages ${url}`);\n                }).catch(() => {});\n        }\n\n        if (messages.length > 0) {\n            IRC.setNamespace('memo');\n            SQL.async.run`\n                DELETE FROM memo\n                WHERE LOWER(\"to\") = LOWER(${from})\n                AND server = ${server}\n                AND (${String(+isPM)} OR channel = ${target} OR channel IS NULL) \n            `.catch(print.error);\n        }\n    }).catch(print.error);\n\n}, { filter: () => IRC.queryConfig('enableMemo', true) })\n\nIRC.setNamespace('memo');\nif (!SQL.one`SELECT 1 FROM sqlite_master WHERE name='memo'`) {\n    SQL.exec`\n        DROP TABLE IF EXISTS memo;\n\n        CREATE TABLE memo (\n            key INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n            \"from\" VARCHAR (100),\n            \"to\" VARCHAR (100),\n            server TEXT,\n            channel TEXT,\n            message TEXT,\n            time DATETIME DEFAULT ((DATETIME(CURRENT_TIMESTAMP, 'LOCALTIME')))\n        );\n\n        CREATE INDEX idx_to\n        ON memo ('to');\n    `;\n}"
}