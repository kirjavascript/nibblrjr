{
    "event": false,
    "locked": false,
    "starred": false,
    "name": "event.remind",
    "command": "const dateFns = require('date-fns@1.30.1');\n\nIRC.listen('tick', ({ target, server }) => {\n    IRC.setNamespace('remind');\n    SQL.async.many`\n        SELECT \"key\", \"from\", \"time\", \"message\" from remind\n        WHERE \"when\" < ${(new Date).toISOString()}\n        AND server = ${server}\n        AND channel = ${target} \n        LIMIT 1\n    `.then(messages => {\n        if (messages.length > 0) {\n            const [msg] = messages;\n\n            let out = `${IRC.colors.nick(msg.from, true)} `;\n            out += msg.message \n            out += ` {/}({dc}${dateFns.distanceInWordsStrict(msg.time, new Date())} ago{/})`;\n            print(out);\n\n            IRC.setNamespace('remind');\n            SQL.async.run`\n                DELETE FROM remind\n                WHERE key = ${msg.key}\n            `.catch(() => {});\n        }\n    }).catch(() => {});\n}, { filter: () => IRC.queryConfig('enableRemind', false) })\n\nIRC.setNamespace('remind');\nif (!SQL.one`SELECT 1 FROM sqlite_master WHERE name='remind'`) {\n    SQL.exec`\n        DROP TABLE IF EXISTS remind;\n\n        CREATE TABLE remind (\n            key INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n            \"from\" VARCHAR (100),\n            \"when\" DATETIME,\n            server TEXT,\n            channel TEXT,\n            message TEXT,\n            time DATETIME DEFAULT ((DATETIME(CURRENT_TIMESTAMP, 'LOCALTIME')))\n        );\n\n        CREATE INDEX idx_from\n        ON remind ('from', 'when');\n    `;\n}"
}