{
    "locked": true,
    "starred": true,
    "name": "html",
    "command": "const _ = require('lodash');const parser = require('posthtml-parser');\nconst { findClosestColor } = require('color-to-name');\n\nconst bold = (item) => '{bo}' + walk(item.content) + '{/}';\n\nconst tags = {\n    b: (item) => '{bo}' + walk(item.content) + '{/}',\n    strong: (item) => '{bo}' + walk(item.content) + '{/}',\n    marquee: (item) => {\n        const text = walk(item.content);\n        return Array.from({ length: _.get(item, 'attrs.count', 10) }, (_, i) => ' '.repeat(i*5) + text).join`\\n`\n    },\n    blink: (item) => {\n        const text = walk(item.content);\n        return Array.from({ length: _.get(item, 'attrs.count', 10) }, (_, i) => (i%2?' ':text) + '\\n').join`\\n`\n    },\n    font: (item) => {\n        const text = walk(item.content);\n        const color = getColor(_.get(item, 'attrs.color'));\n        const size = _.get(item, 'attrs.size');\n        return `${color}${setSize(text, size)}${color?'{/}':''}`;\n    },\n    big: () => {\n        return large(walk(item.content));\n    },\n    small: (item) => {\n        return small(walk(item.content));\n    },\n    sup: (item) => {\n        return small(walk(item.content));\n    },\n    italic: (item) => {\n        return italic(walk(item.content));\n    },\n    em: (item) => {\n        return italic(walk(item.content));\n    },\n    i: (item) => {\n        return italic(walk(item.content));\n    },\n    spacer: (item) => {\n        return Array.from({ length: _.get(item, 'attrs.height', 5) }, (a, i) => '█'.repeat(_.get(item, 'attrs.width', 5))).join`\\n`\n    },\n};\n\nfunction walk(node) {\n    return IRC.colors(node.map(item => {\n        if (typeof item == 'string') {\n            return item;\n        }\n        const tag = item.tag.toLowerCase();\n        if (tags[tag]) {\n            return tags[tag](item);\n        } else {\n            return item.content ? walk(item.content) : '';\n        }\n    }).join` `);\n}\n\nconst small = (s) => {\n    a=[...\"ᴬᴮᶜᴰᴱᶠᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾQᴿˢᵀᵁⱽᵂˣʸᶻᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖqʳˢᵗᵘᵛʷˣʸᶻ⁰¹²³⁴⁵⁶⁷⁸⁹⁰\"];\n    b=[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'];\n    return s.split``.map(d => a[b.indexOf(d)] || d).join``;\n}\nconst medium = (s) => {\n    a=[...\"ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴩQʀꜱᴛᴜᴠᴡxYᴢᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴩqʀꜱᴛᴜᴠᴡxyᴢ01234567890\"];\n    b=[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'];\n    return s.split``.map(d => a[b.indexOf(d)] || d).join``;\n}\nconst large = (s) => {\n    a=[...\"ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ０１２３４５６７８９\"];\n    b=[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'];\n    return s.split``.map(d => a[b.indexOf(d)] || d).join``;\n}\nconst italic = (s) => {\n    a=[...'𝒜𝐵𝒞𝒟𝐸𝐹𝒢𝐻𝐼𝒥𝒦𝐿𝑀𝒩𝒪𝒫𝒬𝑅𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵𝒶𝒷𝒸𝒹𝑒𝒻𝑔𝒽𝒾𝒿𝓀𝓁𝓂𝓃𝑜𝓅𝓆𝓇𝓈𝓉𝓊𝓋𝓌𝓍𝓎𝓏'];\n    b=[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'];\n    return s.split``.map(d => a[b.indexOf(d)] || d).join``;\n}\n\nfunction setSize(text, size) {\n    const sizes = {\n        1: small,\n        3: medium,\n        4: large,\n    };\n    if (sizes[+size]) {\n        return sizes[+size](text);\n    }\n    return text;\n}\n\nfunction getColor(color) {\n    function dark(color, s) {\n        return '{' + (/night|dark/.test(color) ? 'd' + s : s) + '}';\n    }\n    color = color ? color.trim() : '';\n    if (color[0] == '#') {\n        try {\n            color = findClosestColor(color).name\n            // log(color);\n        } catch {}\n    }\n    if (/red|maroon/.test(color)) {\n        return dark(color, 'r');\n    } else if (/white/.test(color)) {\n        return '{w}';\n    } else if (/black/.test(color)) {\n        return '{bl}';\n    } else if (/cyan/.test(color)) {\n        return dark(color, 'c');\n    } else if (/blue/.test(color)) {\n        return dark(color, 'b');\n    } else if (/green/.test(color)) {\n        return dark(color, 'g');\n    } else if (/purple|pink|indigo/.test(color)) {\n        return dark(color, 'p');\n    } else if (/brown|orange/.test(color)) {\n        return '{o}';\n    } else if (/yellow/.test(color)) {\n        return '{y}';\n    } else if (/grey|gray/.test(color)) {\n        return '{gr}';\n    } else if (/rainbow/.test(color)) {\n        return '{rb}';\n    }\n    return '';\n}\n\nprint(walk(parser(input)));"
}
