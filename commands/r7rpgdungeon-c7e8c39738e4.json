{
    "locked": false,
    "starred": false,
    "name": "r7rpg.dungeon",
    "command": "const { from } = IRC.message\nconst { getPlayer, savePlayer } = IRC.require('r7rpg.game')\nplayer = getPlayer()\n\nconst resetDungeon = () => {\n  IRC.require('r7rpg.player').resetDungeon()\n}\n\nconst newDungeon = () => {\n  \n}\n\nconst canDungeon = () => {\n  if (player.dungeon && player.dungeon.status === true) {\n    throw new Error(`{dc}${from}{/} You are already in a dungeon`)\n  }\n  \n  //if (from != 'barf') {\n  //  throw new Error(`{dc}${from}{/}: Dungeon is locked sorry`)\n  //}\n  \n  if (player.status.type != 'idle') {\n    throw new Error(`{dc}${from}{/} You cannot enter a dungeon ({y}Status: ${player.status.type}{/})`)\n  }\n  \n  return true\n}\n\nconst status = () => {\n  print(`{dc}${from}{/}: Status: ${player.dungeon.status} Potions: ${player.dungeon.potions}`)\n}\n\nconst checkRoom = () => {\n  const roomType = IRC.require('r7rpg.dungeon_map').getCurrent()\n  \n  switch (roomType) {\n    case 'enemy':\n      print(`{dc}${from}{/} has walked into an {r}enemy room`)\n      IRC.require('r7rpg.enemies').newEnemy(null, player.stats.level)\n      break\n    case 'treasure':\n      print(`{dc}${from}{/} has entered a {y}treasure room`)\n      const chance = Math.floor(Math.random() * 100)\n      if (chance < 35) {\n        IRC.require('r7rpg.player').giveItemFromPool('Dungeon')\n      } else {\n        IRC.require('r7rpg.player').giveItem()\n      }\n      print(IRC.require('r7rpg.dungeon_map').getDirections(player.dungeon.current[0], player.dungeon.current[1]))\n      break\n    case 'boss':\n      print(`{dc}${from}{/} {r}has entered the {bl, dr} boss room `)\n      IRC.require('r7rpg.player').saveDungeonStatus('boss')\n      IRC.require('r7rpg.enemies').newEnemy(null, player.stats.level + 5, 1.2)\n      break\n    default:\n      print(`{dc}${from}{/} is in an empty room`)\n      print(IRC.require('r7rpg.dungeon_map').getDirections(player.dungeon.current[0], player.dungeon.current[1]))\n      break\n  }\n}\n\nconst completeDungeon = () => {\n  IRC.require('r7rpg.game').incrementInfo('dungeons_completed')\n  IRC.require('r7rpg.player').incrementInfo(\"dungeons_completed\")\n  print(`{dc}${from}{/} has completed a dungeon`)\n  IRC.require('r7rpg.player').giveItem()\n  IRC.require('r7rpg.player').giveItem()\n  IRC.require('r7rpg.player').giveItem()\n  IRC.require('r7rpg.player').credit(3000, true)\n  IRC.require('r7rpg.player').addXp(5000, true)\n  IRC.require('r7rpg.player').resetDungeon()\n}\n\nconst inDungeon = () => {\n  if (player.dungeon && player.dungeon.status) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst onEnemyDead = () => {\n  IRC.require('r7rpg.game').incrementInfo('dungeons_enemies_killed')\n  IRC.require('r7rpg.player').incrementInfo(\"dungeons_enemies_killed\")\n  if (player.dungeon.status === 'boss') {\n    completeDungeon()\n  } else {\n    print(IRC.require('r7rpg.dungeon_map').getDirections(player.dungeon.current[0], player.dungeon.current[1]))\n  }\n}\n\nconst onItemUsed = (item) => {\n  if (item === 'Potion') {\n    if (player.dungeon.potions > 0) {\n      IRC.require('r7rpg.player').useDungeonPotion()\n      return true\n    } else {\n      throw new Error(`{dc}${from}{/}: You have reached the potion limit for this dungeon`)\n    }\n  }\n}\n\nconst onPlayerDead = () => {\n  print(`{dc}${from}{/} has failed the dungeon`)\n  IRC.require('r7rpg.player').resetDungeon()\n}\n\nif (!player.dungeon) {\n  IRC.require('r7rpg.player').resetDungeon()\n}\n\nif (!module.required) {\n  switch (input.trim()) {\n    case '':\n      if (canDungeon()) {\n        print(`{bl, dr} Dungeon beta {/} Might break - Use {y}~r7rpg.dungeon reset{/}`)\n        IRC.require('r7rpg.game').incrementInfo('dungeons_started')\n        IRC.require('r7rpg.player').incrementInfo(\"dungeons_started\")\n        const start = Math.floor(Math.random() * (5))\n        const map = IRC.require('r7rpg.dungeon_map').generateMap(start)\n        const dungeon = {\n          status: true,\n          map: map,\n          current: [0, start],\n          potions: 10\n        }\n        IRC.require('r7rpg.player').setDungeon(dungeon)\n        player = getPlayer()\n        IRC.require('r7rpg.dungeon_map').displayMap()\n        print(IRC.require('r7rpg.dungeon_map').getDirections(player.dungeon.current[0], player.dungeon.current[1]))\n      } else {\n        throw new Error(`{dc}${from}{/}: You cannot dungeon right now`)\n      }\n      break\n    case 'reset':\n      resetDungeon()\n      break\n    case 'map':\n      if (player.dungeon.status) {\n        IRC.require('r7rpg.dungeon_map').displayMap()\n        print(IRC.require('r7rpg.dungeon_map').getDirections(player.dungeon.current[0], player.dungeon.current[1]))\n      } else {\n        throw new Error(`{dc}${from}{/}: You are not in a dungeon`)\n      }\n      break\n    case 'status':\n      status()\n      break\n    case 'north':\n      if (player.status.type === 'idle') {\n        IRC.require('r7rpg.dungeon_map').movePlayer('north')\n        checkRoom()\n      } else {\n        throw new Error(`{dc}${from}{/}: You cannot move yet`)\n      }\n      break\n    case 'east':\n      if (player.status.type === 'idle') {\n        IRC.require('r7rpg.dungeon_map').movePlayer('east')\n        checkRoom()\n      } else {\n        throw new Error(`{dc}${from}{/}: You cannot move yet`)\n      }\n      break\n    case 'south':\n      if (player.status.type === 'idle') {\n        IRC.require('r7rpg.dungeon_map').movePlayer('south')\n        checkRoom()\n      } else {\n        throw new Error(`{dc}${from}{/}: You cannot move yet`)\n      }\n      break\n    case 'west':\n      if (player.status.type === 'idle') {\n        IRC.require('r7rpg.dungeon_map').movePlayer('west')\n        checkRoom()\n      } else {\n        throw new Error(`{dc}${from}{/}: You cannot move yet`)\n      }\n      break\n    case 'debug':\n      IRC.require('r7rpg.dungeon_map').debugMap()\n      break\n  }\n}\n\nmodule.exports = {\n  inDungeon,\n  onEnemyDead,\n  onPlayerDead,\n  onItemUsed\n}"
}