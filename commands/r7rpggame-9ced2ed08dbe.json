{
    "locked": false,
    "starred": false,
    "name": "r7rpg.game",
    "command": "const { from } = IRC.message\nlet player = getPlayer()\nlet game = store.load('#game')\n\nfunction getPlayer(_from = null) {\n  if (_from) {\n\tlet player = store.load(_from)\n    if (! player.status) {\n      throw new Error(`Player {dc}${_from}{/} not found`) \n    }\n    return player \n  } else {\n    let player = store.load(from)\n    if (! player.status) {\n      throw new Error(`Player {dc}${from}{/} not found`) \n    }\n    return player \n  }\n}\n\nfunction savePlayer(_player) {\n  store.save(from, _player)\n}\n\nfunction savePlayerAs(_from, _player) {\n  store.save(_from, _player)\n}\n\nconst roll7 = (fancy = false) => {\n  incrementInfo('roll7s')\n  const roll = () => (0|Math.random()*6)+1\n  const dice = Array.from({length: 7}, roll)\n  const total = dice.reduce((a, c) => a + c, 0)\n  if (player.dice) {\n    if (!player.items.includes(player.dice)) {\n      IRC.require('r7rpg.player').setDice(null)\n      render = '{bl,gr} ' + dice.map(d => d == 1 ? '{bo}{p,gr}1{/}{bl,gr}' : d).join`-` + ' {/}'\n    } else {\n      switch (player.dice) {\n        case \"Red Dice\":\n          render = '{gr,dr} ' + dice.map(d => d == 1 ? '{bo}{w,dr}1{/}{gr,dr}' : d).join` {/} {gr,dr} ` + ' {/}'\n          break\n        case \"Cursed Dice\":\n          render = '{bl,r} ' + dice.map(d => d == 1 ? '{bo}{bl,r}1{/}{bl,r}' : d).join` ` + ' {/}'\n          break\n        case \"Toxic Dice\":\n          render = '{p,g} ' + dice.map(d => d == 1 ? '{bo}{w,g}1{/}{p,g}' : d).join` {/} {p,g} ` + ' {/}'\n          break\n        case \"Invisible Dice\":\n          render = ''\n          break\n        case \"Blue Dice\":\n          render = `{b,bl} ${dice[0]} ${dice[1]} ${dice[2]} ${dice[3]} ${dice[4]} ${dice[5]} ${dice[6]} {/}`\n          break\n        case \"Ginger Dice\":\n          render = `{bl,o} ${dice[0]} ${dice[1]} ${dice[2]} ${dice[3]} ${dice[4]} ${dice[5]} ${dice[6]} {/}`\n          break\n        case \"Hyper Dice\":\n          render = `{rb}|${dice[0]}|${dice[1]}|${dice[2]}|${dice[3]}|${dice[4]}|${dice[5]}|${dice[6]}|{/}`\n          break\n        default:\n          render = '{bl,gr} ' + dice.map(d => d == 1 ? '{bo}{p,gr}1{/}{bl,gr}' : d).join`-` + ' {/}'\n          break\n      }\n    }\n  } else {\n    render = '{bl,gr} ' + dice.map(d => d == 1 ? '{bo}{p,gr}1{/}{bl,gr}' : d).join`-` + ' {/}'\n  }\n  IRC.require('r7rpg.player').bestLowest('roll7', total, false)\n  IRC.require('r7rpg.player').bestHighest('roll7worst', total, false)\n  bestLowest('roll7', total, true)\n  bestHighest('roll7worst', total, true)\n  let percent\n  if (roll === 7) {\n    print(`{rb}wtf a 7 has been rolled`)\n    percent = 1000000\n  } else {\n    percent = Math.ceil(((total-7)/35)*100)\n  }\n  return {total: total, render: render, percent: percent}\n}\n\nsaveGame = () => {\n  store.save('#game', game)\n}\n\nconst setInfo = (key, value) => {\n  if (game.info != undefined && game.info[key] != undefined) {\n    game.info[key] = value\n  } else {\n    if (game.info == undefined) {\n      game.info = {}\n      game.info[key] = value\n    } else {\n      game.info[key] = value\n    }\n  }\n  saveGame()\n  return game.info[key]\n}\n\nconst getInfo = (key) => {\n  if (game.info != undefined && game.info[key] != undefined) {\n    return game.info[key]\n  } else {\n    return 0\n  }\n  saveGame()\n}\n\nconst incrementInfo = (key, value = 1) => {\n  if (game.info != undefined && game.info[key] != undefined) {\n    game.info[key] += parseInt(value)\n  } else {\n    if (game.info == undefined) {\n      game.info = {}\n      game.info[key] = value\n    } else {\n      game.info[key] = value\n    }\n  }\n  saveGame()\n  return game.info[key]\n}\n\nconst bestLowest = (key, value, verbose = false) => {\n  if (game.info != undefined && game.info[key] != undefined) {\n    if (game.info[key] > value) {\n      game.info[key] = value\n      game.info[key + '_player'] = from\n      if (verbose) {\n        print(`{dc}${from}{/} got a new {b}${key}{/} record of {y}${value}`)\n      }\n    }\n  } else {\n    if (game.info == undefined) {\n      game.info = {}\n      game.info[key] = value\n    } else {\n      game.info[key] = value\n    }\n  }\n  saveGame()\n}\n\nconst bestHighest = (key, value, verbose = false) => {\n  if (game.info != undefined && game.info[key] != undefined) {\n    if (game.info[key] < value) {\n      game.info[key] = value\n      game.info[key + '_player'] = from\n      if (verbose) {\n        print(`{dc}${from}{/} got a new {b}${key}{/} record of {y}${value}`)\n      }\n    }\n  } else {\n    if (game.info == undefined) {\n      game.info = {}\n      game.info[key] = value\n    } else {\n      game.info[key] = value\n    }\n  }\n  saveGame()\n}\n\n\nmodule.exports = {\n    getPlayer, savePlayer, savePlayerAs, roll7, setInfo, getInfo, incrementInfo, bestLowest, bestHighest\n};"
}