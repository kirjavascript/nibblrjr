{
    "locked": false,
    "starred": false,
    "name": "r7rpg.player",
    "command": "const { from } = IRC.message\n\nlet player_name = from\nlet player = store.load(from)\n\nif (! player.status) {\n  throw new Error(`Player {dc}${name}{/} not found. Use {y}~r7rpg.register{/} to play.`) \n}\n\nconst savePlayer = () => {\n  store.save(player_name, player)\n}\n\nconst isAlive = () => {\n  if (player.status.type != 'dead') {\n    return true\n  }\n  return false\n}\n\nconst setDice = (dice) => {\n  player.dice = dice\n  savePlayer()\n}\n\nconst resetQuest = () => {\n  player.quest = {\n    name: null,\n    command: null,\n    stage: null\n  }\n  savePlayer()\n}\n\nconst resetDungeon = () => {\n  player.dungeon = {\n\tstatus: false,\n    map: null,\n    current: null,\n    potions: null\n  }\n  savePlayer()\n}\n\nconst setDungeon = (dungeon) => {\n  player.dungeon = dungeon\n  savePlayer()\n}\n\nconst saveEnemy = (enemy) => {\n  player.enemy = enemy\n  player.status.type = 'combat'\n  savePlayer()\n}\n\nconst completeQuest = () => {\n  if (! IRC.require('r7rpg.quest').inQuest()) {\n    throw new Error(`{dc}${player_name}{/}: Couldn't complete quest (not found)`)\n  }\n  if (! player.completed_quests) {\n    player.completed_quests = []\n  }\n  player.completed_quests.push(player.quest.name)\n  savePlayer()\n}\n\nconst addXp = (xp, verbose = false) => {\n   if (player.items.includes(\"Goose Beak\")) {\n     print(`{dc}${player_name}{/} rubbed his {y}Goose Beak{/} ({p}+${xp}xp{/})`)\n     incrementItemInfo('gooseBeakXp', xp)\n     xp = xp * 2\n     const gooseBeakUses = incrementItemInfo('gooseBeakUses')\n     const gooseChance = Math.floor(Math.random() * 100)\n     if (gooseChance < gooseBeakUses) {\n       removeItem('Goose Beak')\n       setItemInfo('gooseBeakUses', 0)\n       const goose_xp = getItemInfo('gooseBeakXp')\n       setItemInfo('gooseBeakXp', 0)\n       print(`{dc}${from}'s {y}Goose Beak{/} has vanished ({g}${gooseBeakUses} uses{/} {p}${goose_xp}xp{/})`)\n     }\n  }\n  player.stats.xp += xp\n  IRC.require('r7rpg.game').incrementInfo('xp_added', xp)\n  bestHighest('xpReceived', xp, false)\n  if (verbose) {\n    print(`{dc}${player_name}{/} gained experience {g}(+${xp}xp){/} {r}(${player.stats.xp}/${player.stats.next_level}){/}`)\n  }\n  while (true) {\n    if (player.stats.xp > player.stats.next_level) {\n      levelUp()\n    } else {\n      break\n    }\n  }\n  savePlayer()\n}\n\nconst addHealth = (health, heal = false, verbose = true) => {\n  player.stats.max_health += health\n  if (heal) {\n    healPlayer(false, false, false)\n  }\n  if (verbose) {\n    if (health > 0) {\n      print(`{dc}${player_name}{/} feels healthier {g}(+${health}){/} {r}(${player.stats.current_health}/${player.stats.max_health}){/}`)\n    } else {\n      print(`{dc}${player_name}{/} feels unhealthy {r}(${health}){/} {r}(${player.stats.current_health}/${player.stats.max_health}){/}`)\n    }\n  }\n  savePlayer()\n}\n\nconst healPlayer = (amount = false, overflow = false, verbose = true) => {\n  if (amount) {\n    if (overflow) {\n      player.stats.current_health += amount\n    } else {\n      healAmount = player.stats.max_health - player.stats.current_health\n      if (healAmount <= amount) {\n        amount = healAmount\n      }\n      player.stats.current_health += amount\n    }\n  } else {\n    amount = player.stats.max_health - player.stats.current_health\n    player.stats.current_health = player.stats.max_health\n  }\n  IRC.require('r7rpg.game').incrementInfo('times_healed')\n  if (verbose) {\n    print(`{dc}${player_name}{/} healed ${amount} hp ({r}${player.stats.current_health}/${player.stats.max_health}{/})`)\n  }\n  savePlayer()\n}\n\nconst addStrength = (strength, verbose = true) => {\n  player.stats.strength += strength\n  if (verbose) {\n    if (strength > 0) {\n      print(`{dc}${player_name}{/} feels stronger {g}(+${strength} strength){/}`)\n    } else {\n      print(`{dc}${player_name}{/} feels weaker {r}(${strength} strength){/}`)\n    }\n  }\n  savePlayer()\n}\n\nconst addDefense = (defense, verbose = true) => {\n  player.stats.defense += defense\n  if (verbose) {\n    if (defense > 0) {\n      print(`{dc}${player_name}{/}'s defense has increased {g}(+${defense} defense){/}`)\n    } else {\n      print(`{dc}${player_name}{/}'s defense has decreased {r}(${defense} defense){/}`)\n    }\n  }\n  savePlayer()\n}\n\nconst addAgility = (agility, verbose = true) => {\n  player.stats.agility += agility\n  if (verbose) {\n    if (agility > 0) {\n      print(`{dc}${player_name}{/}'s agility has increased {g}(+${agility} agility){/}`)\n    } else {\n      print(`{dc}${player_name}{/}'s agility has decreased {r}(${agility} agility){/}`)\n    }\n  }\n  savePlayer()\n}\n\nconst addIntelligence = (intelligence, verbose = true) => {\n  player.stats.intelligence += intelligence\n  if (verbose) {\n    if (intelligence > 0) {\n      print(`{dc}${player_name}{/} feels smarter {g}(+${intelligence} intelligence){/}`)\n    } else {\n      print(`{dc}${player_name}{/} feels dumber {r}(${intelligence} intelligence){/}`)\n    }\n  }\n  savePlayer()\n}\n\nconst levelUp = () => {\n  IRC.require('r7rpg.game').incrementInfo('levels_added')\n  player.stats.level++\n  if (player.stats.level <= 5) {\n    player.stats.next_level = player.stats.next_level + Math.ceil(player.stats.next_level * 1.6)\n  } else {\n    player.stats.next_level = Math.ceil(player.stats.next_level * 1.6)\n  }\n  addStrength(player.stats.level * 5, false)\n  addHealth(10, true, false)\n  addDefense(10, false)\n  addAgility(10, false)\n  addIntelligence(10, false)\n  print(`{rb}${player_name} leveled up! (lvl ${player.stats.level}) (XP: ${player.stats.xp}/${player.stats.next_level}){/}`)\n  savePlayer()\n  if (player.items.includes(\"Lucky Dog's Dick\")) {\n    IRC.require('r7rpg.items').getItem()\n    if (incrementItemInfo('luckyDogDickUses') > 20) {\n      removeItem('Lucky Dog\\'s Dick')\n      setItemInfo('luckyDogDickUses', 0)\n      print(`{dc}${from} has worn his {y}Lucky Dog's Dick{/} right out`)\n    }\n  } else if (Math.floor(Math.random() * 3) === 2) {\n    IRC.require('r7rpg.items').getItem()\n  }\n  IRC.require('r7rpg.quest').checkQuests()\n}\n\nconst getAttack = (defendable = true) => {\n  roll = IRC.require('r7rpg.game').roll7()\n  \n  let attack = Math.ceil(player.stats.strength - (player.stats.strength/100) * roll.percent)\n\n  if (defendable && defChance(player.enemy.intelligence, player.stats.intelligence)) {\n    defenseRoll = IRC.require('r7rpg.game').roll7()\n    defense = Math.ceil(player.enemy.defense - (player.enemy.defense/100) * defenseRoll.percent)\n    attack -= defense\n    if (attack < 0) {\n      attack = 0\n    }\n    print(`${roll.render} {y}*${roll.total}*{/} {dc}${from}{/} did {b}${attack}{/} ({r}-${defense} def{/}) damage`);\n  } else {\n    print(`${roll.render} {y}*${roll.total}*{/} {dc}${from}{/} did {b}${attack}{/} damage`);\n  }\n  \n  bestHighest('damageGiven', attack, false)\n  IRC.require('r7rpg.game').bestHighest('most_damage_given', attack)\n  IRC.require('r7rpg.game').incrementInfo('damage_given', attack)\n  \n  return attack\n}\n\nconst damage = (amount, verbose = true) => {\n  player.stats.current_health -= amount\n  bestHighest('damageTaken', amount, false)\n  IRC.require('r7rpg.game').bestHighest('most_damage_taken', amount)\n  IRC.require('r7rpg.game').incrementInfo(\"damage_taken\", amount)\n  if (player.stats.current_health <= 0) {\n    IRC.require('r7rpg.items').onBattleEnd()\n    kill()\n  }\n  if (player.stats.current_health > 0 && player.stats.current_health < 20 && verbose) {\n    print(`{dc}${from}{/}{r} is badly wounded{/}`);\n  }\n}\n\nconst kill = (verbose = true) => {\n  player.status.type = 'dead'\n  const d = new Date();\n  const time = d.toISOString();\n  player.status.last_death = time\n  player.stats.current_health = 0\n  player.enemy = null\n  incrementInfo(\"deaths\")\n  IRC.require('r7rpg.game').incrementInfo('deaths')\n  if (verbose) {\n    print(`{dc}${from}{/} has died`);\n  }\n\n  if (player.items.includes(\"Auto Defibrillator\")) {\n    revive()\n    if (incrementItemInfo('autoDefibrillatorUses') > 100) {\n      removeItem('Auto Defibrillator')\n      setItemInfo('autoDefibrillatorUses', 0)\n      print(`{dc}${from}'s{y} Auto Defibrillator{/} has worn out`)\n    }\n    if (player.items.includes(\"Rusty Spanner\")) {\n      healPlayer()\n      if (incrementItemInfo('rustySpannerUses') > 100) {\n        removeItem('Rusty Spanner')\n        setItemInfo('rustySpannerUses', 0)\n        print(`{dc}${from}'s{y} Rusty Spanner{/} has worn out`)\n      }\n    }\n  }\n  savePlayer()\n  \n  if (IRC.require('r7rpg.quest').inQuest()) {\n    IRC.require(player.quest.command).onPlayerDead()\n  }\n  \n  if (IRC.require('r7rpg.dungeon').inDungeon()) {\n    IRC.require('r7rpg.dungeon').onPlayerDead()\n  }\n}\n\nconst revive = (verbose = true) => {\n  if (player.status.type === 'dead') {\n    player.status.type = 'idle'\n    IRC.require('r7rpg.game').incrementInfo(\"revives\")\n    if (verbose) {\n      print(`{dc}${from}{/} is alive`);\n    }\n\tsavePlayer()\n  }\n}\n\nconst charge = (amount, verbose = true) => {\n  IRC.require('r7rpg.game').incrementInfo(\"money_spent\", amount)\n  if (player.stats.money >= amount) {\n    player.stats.money -= amount\n    if (verbose) {\n      print(`{dc}${player_name}{/} spent {r}$${amount}{/} ({y}$${player.stats.money}{/})`)\n    }\n    savePlayer()\n    return true\n  } else {\n    throw new Error(`{dc}${from}{/} is too poor`)\n  }\n}\n\nconst credit = (amount, verbose = false) => {\n  IRC.require('r7rpg.game').incrementInfo(\"money_given\", amount)\n  player.stats.money += amount\n  if (verbose) {\n    print(`{dc}${player_name}{/} received {y}$${amount}{/} ($${player.stats.money})`)\n  }\n  savePlayer()\n}\n\nconst giveItem = (item = null, from = \"{r}Hacking{/}\", status = null, verbose = true) => {\n  IRC.require('r7rpg.items').getItem(item, from, status, verbose)\n}\n\nconst giveItemFromPool = (poolName = 'common', printName = null, verbose = true) => {\n  IRC.require('r7rpg.items').getItemFromPool(poolName, printName, verbose)\n}\n\nconst saveItem = (item) => {\n  player.items.push(item)\n  savePlayer()\n}\n\nconst removeItem = (item, verbose = false) => {\n  if (player.items.includes(item)) {\n    player.items.splice(player.items.indexOf(item), 1)\n    savePlayer()\n    if (verbose) {\n      print(`{dc}${from}{/} discarded ${item}`)\n    }\n  }\n}\n\nconst reset = () => {\n  player.enemy = null\n  player.status.type = 'idle'\n  savePlayer()\n}\n\nconst status = (status = null) => {\n  if (status) {\n    player.status.type = status\n    savePlayer()\n    return status\n  } else {\n    return player.status.type\n  }\n}\n\nconst damageEnemy = (amount) => {\n  if (player.enemy) {\n    if (IRC.require('r7rpg.quest').inQuest()) {\n      IRC.require(player.quest.command).onPlayerAttack()\n      player = store.load(from)\n    }\n    if (player.enemy.name === 'Monqui') {\n      const monquiRoll = IRC.require('r7rpg.game').roll7()\n      if (monquiRoll.percent > 70) {\n        player.enemy.health -= 50\n      \tprint(`{r}Enemy {g}Monqui {r}has been nerfed by 50hp for {w}hating little people`)\n      } else if (monquiRoll.percent < 30) {\n        player.enemy.health += 30\n      \tprint(`Enemy {g}Monqui{/} ate some {y}beans{/}`)\n      }\n    }\n    player.enemy.health -= amount\n    if (player.enemy.health <= 0) {\n      addXp(player.enemy.xp)\n      credit(player.enemy.money)\n\n      if (player.quest && player.quest.silenceKills) {\n        //nothing?\n      } else {\n        print(`{dc}${player_name}{/} killed the enemy {g}${player.enemy.name}{/} ({p}+${player.enemy.xp}xp {y}+$${player.enemy.money}{/})`)\n      }\n      \n\t  if (player.items.includes(\"Lucky Dog's Dick\") && Math.floor(Math.random() * 2) === 1) {\n        giveItem()\n        if (incrementItemInfo('luckyDogDickUses') > 20) {\n          removeItem('Lucky Dog\\'s Dick')\n          setItemInfo('luckyDogDickUses', 0)\n          print(`{dc}${from}{/} has worn his {y}Lucky Dog's Dick{/} right out`)\n        }\n      } else if (player.enemy.name === 'Giant Octopus') {\n        if (Math.floor(Math.random() * 1000) === 777) {\n          giveItem('Hyper Dice')\n        } else {\n          giveItem()\n        }\n      } else if (Math.floor(Math.random() * 30) === 7) {\n        giveItem()\n      }\n      \n      if (player.items.includes(\"Rusty Spanner\")) {\n        if (player.stats.current_health < player.stats.max_health) {\n          healPlayer()\n          if (incrementItemInfo('rustySpannerUses') > 100) {\n            removeItem('Rusty Spanner')\n            setItemInfo('rustySpannerUses', 0)\n            print(`{dc}${from}'s {y}Rusty Spanner{/} has worn out`)\n          }\n        }\n      }\n      \n      IRC.require('r7rpg.items').onBattleWon()\n      IRC.require('r7rpg.items').onBattleEnd()\n      \n      if (IRC.require('r7rpg.quest').inQuest()) {\n        IRC.require(player.quest.command).onEnemyDead()\n        player = store.load(from)\n      } else if (IRC.require('r7rpg.dungeon').inDungeon()) {\n        IRC.require('r7rpg.dungeon').onEnemyDead()\n        player = store.load(from)\n        reset()\n      } else {\n        reset()\n      }\n    } else {\n      if (IRC.require('r7rpg.quest').inQuest()) {\n        IRC.require(player.quest.command).onEnemyAttack()\n      } else {\n      \tenemyAttack()\n      }\n    }\n  } else {\n    print(`{dc}${player_name}{/} couldn't find an enemy??`)\n  }\n  //savePlayer()\n}\n\nconst defChance = (intelligence1, intelligence2) => {\n  const roll = IRC.require('r7rpg.game').roll7()\n  if (intelligence1 > intelligence2) {\n    if (roll.percent > 30) {\n      return true\n    } else {\n      return false\n    }\n  } else {\n    if (roll.percent > 60) {\n      return true\n    } else {\n      return false\n    }\n  }\n}\n\nconst enemyAttack = (defendable = true) => {\n  const roll = IRC.require('r7rpg.game').roll7()\n  let attack = Math.ceil(player.enemy.strength - (player.enemy.strength/100) * roll.percent)\n  if (defendable && defChance(player.stats.intelligence, player.enemy.intelligence)) {\n    const defenseRoll = IRC.require('r7rpg.game').roll7()\n    const defense = Math.ceil(player.stats.defense - (player.stats.defense/100) * defenseRoll.percent)\n    attack -= defense\n    if (attack < 0) {\n      attack = 0\n    }\n    print(`${roll.render} {y}*${roll.total}*{/} {dc}${player.enemy.name}{/} did {b}${attack}{/} ({g}-${defense} def{/}) damage`)\n  } else {\n    print(`${roll.render} {y}*${roll.total}*{/} {dc}${player.enemy.name}{/} did {b}${attack}{/} damage`)\n  }\n  damage(attack)\n}\n\nconst fart = () => {\n  print(`{dc}${player_name}{/} fart`)\n  incrementInfo('farts')\n  IRC.require('r7rpg.game').incrementInfo(\"farts\")\n  if (player.items.includes(\"Monqui's Beard\")) {\n    healPlayer(30)\n  }\n  if (player.enemy && player.enemy.name === \"Jew\") {\n    damageEnemy(7777)\n  }\n}\n\nconst setItemInfo = (statName, value) => {\n  if (player.itemInfo != undefined && player.itemInfo[statName] != undefined) {\n    player.itemInfo[statName] = value\n  } else {\n    if (player.itemInfo == undefined) {\n      player.itemInfo = {}\n      player.itemInfo[statName] = value\n    } else {\n      player.itemInfo[statName] = value\n    }\n  }\n}\n\nconst getItemInfo = (statName) => {\n  if (player.itemInfo != undefined && player.itemInfo[statName] != undefined) {\n    return player.itemInfo[statName]\n  } else {\n    return 0\n  }\n  savePlayer()\n}\n\nconst  incrementItemInfo = (statName, value = 1) => {\n  if (player.itemInfo != undefined && player.itemInfo[statName] != undefined) {\n    player.itemInfo[statName] += value\n  } else {\n    if (player.itemInfo == undefined) {\n      player.itemInfo = {}\n      player.itemInfo[statName] = value\n    } else {\n      player.itemInfo[statName] = value\n    }\n  }\n  savePlayer()\n  return player.itemInfo[statName]\n}\n\nconst evade = () => {\n  if (player.status.type === 'combat') {\n    const roll = IRC.require('r7rpg.game').roll7()\n    let evadeChance = 25\n    \n    if (player.stats.agility > player.enemy.agility) {\n      evadeChance = 50\n    }\n    \n    if (player.items.includes(\"Running Shoes\")) {\n      player.status.type = 'idle'\n      print(`{dc}${from}{/} escaped the {g}${player.enemy.name} {/}using{y} Running Shoes{/}`)\n      player.enemy = null\n      if (incrementItemInfo('runningShoesUses') > 10) {\n        removeItem('Running Shoes')\n        setItemInfo('runningShoesUses', 0)\n        print(`{dc}${from}'s{y} Running Shoes{/} have worn out`)\n      }\n      incrementInfo('escapes')\n      IRC.require('r7rpg.game').incrementInfo(\"escapes\")\n      savePlayer()\n    } else if (roll.percent < evadeChance) {\n      player.status.type = 'idle'\n      print(`{b}${from} escaped the ${player.enemy.name}{/}`)\n      player.enemy = null\n      incrementInfo('escapes')\n      IRC.require('r7rpg.game').incrementInfo(\"escapes\")\n      savePlayer()\n    } else {\n      print(`{r}${from} failed to escape ${player.enemy.name}{/}`)\n      enemyAttack()\n      savePlayer()\n    }\n  } else {\n    throw new Error('You cannot escape nothing')\n  }\n}\n\nconst setInfo = (key, value) => {\n  if (player.info != undefined && player.info[key] != undefined) {\n    player.info[key] = value\n  } else {\n    if (player.info == undefined) {\n      player.info = {}\n      player.info[key] = value\n    } else {\n      player.info[key] = value\n    }\n  }\n  savePlayer()\n  return player.info[key]\n}\n\nconst getInfo = (key) => {\n  if (player.info != undefined && player.info[key] != undefined) {\n    return player.info[key]\n  } else {\n    return 0\n  }\n  savePlayer()\n}\n\nconst incrementInfo = (key, value = 1) => {\n  if (player.info != undefined && player.info[key] != undefined) {\n    player.info[key] += value\n  } else {\n    if (player.info == undefined) {\n      player.info = {}\n      player.info[key] = value\n    } else {\n      player.info[key] = value\n    }\n  }\n  savePlayer()\n  return player.info[key]\n}\n\nconst bestLowest = (key, value, verbose = true) => {\n  if (player.info != undefined && player.info[key] != undefined) {\n    if (player.info[key] > value) {\n      player.info[key] = value\n      if (verbose) {\n        print(`{dc}${from}{/} got a new {b}${key}{/} record of {y}${value}`)\n      }\n    }\n  } else {\n    if (player.info == undefined) {\n      player.info = {}\n      player.info[key] = value\n    } else {\n      player.info[key] = value\n    }\n  }\n  savePlayer()\n}\n\nconst bestHighest = (key, value, verbose = true) => {\n  if (player.info != undefined && player.info[key] != undefined) {\n    if (player.info[key] < value) {\n      player.info[key] = value\n      if (verbose) {\n        print(`{dc}${from}{/} got a new {b}${key}{/} record of {y}${value}`)\n      }\n    }\n  } else {\n    if (player.info == undefined) {\n      player.info = {}\n      player.info[key] = value\n    } else {\n      player.info[key] = value\n    }\n  }\n  savePlayer()\n}\n\nconst saveDungeonMap = (map) => {\n  player.dungeon.map = map\n  savePlayer()\n}\n\nconst saveDungeonCurrent = (current) => {\n  player.dungeon.current = current\n  savePlayer()\n}\n\nconst saveDungeonStatus = (status) => {\n  player.dungeon.status = status\n  savePlayer()\n}\n\nconst useDungeonPotion = () => {\n  player.dungeon.potions--\n  savePlayer()\n}\n\nmodule.exports = {\n  savePlayer,\n  addXp,\n  addHealth,\n  healPlayer,\n  addStrength,\n  addDefense,\n  addAgility,\n  addIntelligence,\n  levelUp,\n  getAttack,\n  damage,\n  kill,\n  charge,\n  credit,\n  giveItem,\n  giveItemFromPool,\n  reset,\n  status,\n  damageEnemy,\n  fart,\n  removeItem,\n  saveItem,\n  revive,\n  enemyAttack,\n  evade,\n  setItemInfo,\n  getItemInfo,\n  incrementItemInfo,\n  setInfo,\n  getInfo,\n  incrementInfo,\n  bestLowest,\n  bestHighest,\n  isAlive,\n  resetQuest,\n  saveEnemy,\n  completeQuest,\n  setDice,\n  setDungeon,\n  resetDungeon,\n  saveDungeonMap,\n  saveDungeonCurrent,\n  saveDungeonStatus,\n  useDungeonPotion\n};"
}