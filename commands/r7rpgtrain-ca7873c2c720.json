{
    "locked": false,
    "starred": false,
    "name": "r7rpg.train",
    "command": "const { from } = IRC.message\nlet player = store.load(from)\nlet differenceInHours = require('date-fns/differenceInHours')\nlet differenceInSeconds = require('date-fns/differenceInSeconds')\n\nif (! player.status) {\n  throw new Error(`Player {dc}${from}{/} not found. Use {y}~r7rpg.register{/} to play.`) \n}\n\nconst savePlayer = () => {\n  store.save(from, player)\n}\n\nlet training\n\nif (player.status.training) {\n  training = player.status.training\n  const time = new Date(player.status.training_start)\n  let points = differenceInHours(new Date(), time)\n  \n  IRC.require('r7rpg.game').incrementInfo(\"training_hours\", points)\n  \n  points = Math.floor(points / 2)\n  \n  if (points >= 12) {\n    print(`{dc}${from}{/} {r}has overtrained! (${points} hours)`)\n    const roll = IRC.require('r7rpg.game').roll7()\n    points = roll.total * -1\n  }\n  \n  \n  switch(training) {\n    case 'intelligence':\n      IRC.require('r7rpg.player').addIntelligence(points, true)\n      break\n    case 'strength':\n      IRC.require('r7rpg.player').addStrength(points, true)\n      break\n    case 'defense':\n      IRC.require('r7rpg.player').addDefense(points, true)\n      break\n    case 'agility':\n      IRC.require('r7rpg.player').addAgility(points, true)\n      break\n    case 'health':\n      IRC.require('r7rpg.player').addHealth(points, true)\n      break\n    default:\n      break\n  }\n  \n  player = store.load(from)\n  player.status.type = 'idle'\n  player.status.training = null\n  player.status.training_start = null\n  savePlayer()\n} else {\n  switch(input) {\n    case 'intelligence':\n    case 'Intelligence':\n      training = 'intelligence'\n      break\n    case 'strength':\n    case 'Strength':\n      training = 'strength'\n      break\n    case 'defense':\n    case 'Defense':\n      training = 'defense'\n      break\n    case 'agility':\n    case 'Agility':\n      training = 'agility'\n      break\n    case 'health':\n    case 'Health':\n      training = 'health'\n      break\n    case 'help':\n    case 'Help':\n      throw new Error(`{dc}${from}{/} {y}~r7rpg.train *stat*: Options are Intelligence, Strength, Defense, Agility, Health - 1 point gained per hour up to 24 hours. Don't overtrain.`)\n      break\n    default:\n      throw new Error(`{dc}${from}{/} Options are Intelligence, Strength, Defense, Agility, Health`)\n  }\n  \n  const d = new Date()\n  player.status.type = \"Training\"\n  player.status.training = training\n  player.status.training_start = d.toISOString()\n  \n  savePlayer()\n  \n  print(`{dc}${from}{/} is training {p}${input}`)\n}\n\n"
}