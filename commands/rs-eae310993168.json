{
    "name": "rs",
    "command": "throw 'broken';\n\n// rust repl\ngetJSON('https://play.rust-lang.org/execute', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n        backtrace: false,\n        channel: 'stable',\n        code: getCode(input),\n        crateType: 'bin',\n        mode: 'debug',\n        tests: false,\n    }),\n})\n    .then((foo) => {\n  log(foo)\n        if (success) {\n            print.raw(stdout);\n            //stderr.trim() && print(`{r}${stderr}`);\n        } else {\n            print.raw(stderr.split('\\n').filter(d => (\n                (d.startsWith('error') &&\n                !d.includes('error: aborting due to') &&\n                d !== 'error: Could not compile `playground`.') ||\n                d.includes('panicked')\n            )).join`\\n`);\n        }\n    })\n    .catch(print.error);\n    \nfunction getCode(input) {\n    const rx = /extern\\s+crate\\s+(.*?);/g;\n    const crates = input.match(rx);\n    if (crates) {\n        const inner = input.replace(rx, '');\n        return `${crates.join(' ')} fn main() { println!(\"{:?}\", { ${inner} }) }`;\n    }\n    return `fn main() { println!(\"{:?}\", { ${input} }) }`;\n}\n",
    "locked": true,
    "starred": true
}