{
    "name": "scrabble.game",
    "command": "const { from } = IRC.message;\nconst { wordList } = IRC;\n\nfunction charScore(char){\n    switch(char.toUpperCase()){\n        case \"A\":\n        case \"E\":\n        case \"I\":\n        case \"O\":\n        case \"N\":\n        case \"R\":\n        case \"T\":\n        case \"L\":\n        case \"S\":\n        case \"U\":\n            return 1;\n        case \"D\":\n        case \"G\":\n            return 2;\n        case \"B\":\n        case \"C\":\n        case \"M\":\n        case \"P\":\n            return 3;\n        case \"F\":\n        case \"H\":\n        case \"V\":\n        case \"W\":\n        case \"Y\":\n            return 4;\n        case \"K\":\n            return 5;\n        case \"J\":\n        case \"X\":\n            return 8;\n        case \"Q\":\n        case \"Z\":\n            return 10;\n        default:\n            return 0;\n    }\n}\n\nfunction round(num){\n    return Math.round((num + 0.00001) * 100) / 100;\n}\n\nfunction calculateScore(word){\n    let score = word.split(\"\").reduce(((acc, curr) => charScore(curr) + acc),0) / (storeExist(\"hint\") ? 14 : 7);\n    // go around the scaling issue\n    return round(score)\n}\n\nfunction storeExist(key){\n    return typeof(store.get(key)) !== \"undefined\"\n}\n\nfunction getGuesses(user){\n    let key = user + \"_guesses\";\n    return storeExist(key) ? +store.get(key) : 0\n}\n\nfunction setGuesses(user,reset=false){\n    let key = user + \"_guesses\";\n    return store.set(key,reset || !storeExist(key) ? 0 : +store.get(key) + 1)\n}\n\nfunction resetGuesses(user){\n    getParticipants().map(user => setGuesses(user,true))\n}\n\nfunction getParticipants(){\n    return storeExist(\"participants\") ? JSON.parse(store.get(\"participants\")) : []\n}\nfunction resetParticipants(){\n    store.set(\"participants\",undefined)\n}\n\nfunction addParticipant(user){\n    participants = getParticipants()\n    if (participants.indexOf(user) == -1){\n        participants.push(user)\n        store.set(\"participants\",JSON.stringify(participants))\n    }\n}\n\nfunction isValidAnagram(word1){\n    return isValid(word1) && isAnagram(word1,store.get(\"game\"));\n}\n\nfunction isValid(word){\n    return wordList.indexOf(word) !== -1;\n}\n\nfunction isAnagram(word1,word2){\n    return word1.split(\"\").sort().join() == word2.split(\"\").sort().join()\n}\n\nfunction isGameRunning(){\n    return storeExist(\"game\")\n}\n\nfunction saveHighScore(user){\n    // Increase the High Score of a user who answered correctly\n    let score = calculateScore(store.get(\"game\"));\n    if (storeExist(user)){\n        store.set(user,+store.get(user) + score)\n    }else{\n        store.set(user,score)\n    }\n}\n\nfunction startGame(){\n    let word = getRandomWord();\n    store.set(\"game\",word);\n    let shuffled = word.split(\"\").sort().join(\"\")\n    store.set(\"shuffled\",shuffled);\n    print(`★ {y}Game{/} started with word {dc}${shuffled}{/} worth ${calculateScore(shuffled)} points ★`)\n    IRC.require('module.count').next()\n}\nfunction endGame(){\n    resetGuesses();\n    resetParticipants();\n    store.set(\"game\",undefined)\n    store.set(\"hint\",undefined)\n}\n\nfunction getRandomWord(){\n    let filtered = IRC.wordList.filter(x =>  x.length < 8);\n    return filtered[Math.floor(Math.random() * filtered.length)];\n}\n\nfunction main(){\n    if(isGameRunning()){\n        if(!input){\n            let shuffled = store.get(\"shuffled\");\n            print(`Game running with word {dc}${shuffled}{/} worth ${calculateScore(shuffled)} points`)\n            print(\"Skip with scrabble.game.skip\")\n        }else{\n\t    if (!isAnagram(input,store.get(\"shuffled\").toLowerCase())){\n\t\t    print(\"Wrong Tiles\")\n\t\t    return\n\t    }\n            let user_try = getGuesses(from)\n            if (user_try > 4){\n                print(`Too many guesses for {dc}${from}{/}`)\n            }\n            else{\n                input = input.toUpperCase()\n                setGuesses(from)\n                addParticipant(from)\n                if(isValidAnagram(input)){\n                    saveHighScore(from);\n                    print(`Correct from {dc}${from}{/}. {dc}${from}{/} has ${round(+store.get(from))} points`);\n                    endGame();\n                }else{\n                    print(`Incorrect from {dc}${from}{/}, ${4 - user_try} guess${4 - user_try == 1 ? '' : 'es'} left`)\n                }\n            }\n        }\n    }else{\n        if (input.length > 1){\n            print(\"No game running dummy\")\n        }else{\n         startGame();   \n        }\n    }\n}\n\nif(!module.required){\n    main();\n}\n\nmodule.exports = {endGame,main,isGameRunning,round} ;",
    "locked": false,
    "starred": false
}