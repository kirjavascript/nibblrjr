{
    "event": false,
    "locked": false,
    "starred": false,
    "name": "tio-api",
    "command": "var fieldSeparator = \"\\xff\";\nvar startOfExtraFields = \"\\xfe\";\n\nconst { TextEncoder, TextDecoder } = require('text-encoding-polyfill')\n\nconst pako=require(\"pako\")\n\n\nfunction deflate(arr) {\n    return pako.deflateRaw(arr, {\n        \"level\": 9\n    });\n}\n\nfunction inflate(arr) {\n    return pako.inflateRaw(arr);\n}\n\nfunction encode(str) {\n    var bytes = new TextEncoder(\"utf-8\").encode(str);\n    return deflate(bytes);\n}\n\nfunction arrToB64(arr) {\n    var bytestr = \"\";\n    arr.forEach(c => bytestr += String.fromCharCode(c));\n    return btoa(bytestr).replace(/\\+/g, \"@\").replace(/=+/, \"\");\n}\n\nfunction b64ToArr(str) {\n    return new Uint8Array([...atob(decodeURIComponent(str).replace(/@/g, \"+\"))].map(c => c.charCodeAt()))\n}\n\nfunction byteStringToByteArray(byteString) {\n    var byteArray = new Uint8Array(byteString.length);\n    for(var i = 0; i < byteString.length; i++)\n        byteArray[i] = byteString.charCodeAt(i);\n    byteArray.head = 0;\n    return byteArray;\n}\n\nfunction textToByteString(string) {\n    return window.unescape(window.encodeURIComponent(string));\n}\n\nfunction byteStringToText(string){\n    return window.decodeURIComponent(window.escape(string));\n}\n\nfunction byteArrayToByteString(byteArray) {\n    var retval = \"\";\n    byteArray.forEach(function(byte) {\n        retval += String.fromCharCode(byte);\n    });\n    return retval;\n}\n\nfunction byteStringToBase64(byteString) {\n    return window.btoa(byteString).replace(/\\+/g, \"@\").replace(/=+/, \"\");\n}\n\n\n\nTIO = {\n\n    run:\n    function run(code, input, lang) {\n        const encoder = new TextEncoder(\"utf-8\");\n        var length = encoder.encode(code).length;\n        var iLength = encoder.encode(input).length;\n      \n        //  Vlang\\u00001\\u0000{language}\\u0000F.code.tio\\u0000{# of bytes in code}\\u0000{code}F.input.tio\\u0000{length of input}\\u0000{input}Vargs\\u0000{number of ARGV}{ARGV}\\u0000R\n        var rBody = \"Vlang\\x001\\x00\" + lang + \"\\x00F.code.tio\\x00\" + length + \"\\x00\" + code + \"F.input.tio\\x00\" + iLength + \"\\x00\" + input + \"Vargs\\x000\\x00R\";\n        rBody = encode(rBody);\n        var read = fetchSync(\"https://tio.run/cgi-bin/run/api/\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"text/plain;charset=utf-8\"\n            },\n            body: rBody\n        });\n        //var read = (await fetched.body.getReader().read()).value;\n        var text = read //new TextDecoder('utf-8').decode(read);\n        return text.slice(16).split(text.slice(0, 16));\n    },\n\n\n    makeLink:\n    function makeLink(languageId, header = \"\", code = \"\", footer = \"\", input = \"\", args = [], options = [], fullLink = true) {\n\n        var stateString = languageId;\n\n        var saveTextArea = function(textArea) {\n            stateString += fieldSeparator + textToByteString(textArea);\n        };\n\n        [header, code, footer, input, ...args].forEach(saveTextArea);\n\n        if (options.length) {\n            stateString += startOfExtraFields + \"options\";\n\n            options.forEach(saveTextArea);\n        }\n        // TODO: This default arg isn't working for some reason\n        return (fullLink? \"https://tio.run/##\": \"\") +\n            //byteStringToBase64(byteArrayToByteString(deflate(byteStringToByteArray(stateString))));\n            arrToB64(deflate(byteStringToByteArray(stateString)));\n    },\n\n\n    parseLink:\n    function parseLink(link) {\n        if  (link.slice(0,18) === \"https://tio.run/##\") {\n            link = link.slice(18);\n        }\n\n        var stateString = byteArrayToByteString(inflate(b64ToArr(link)));\n\n        var fields = stateString.split(startOfExtraFields);\n        var fields = fields.map(n=>n.split(fieldSeparator));\n\n        var [languageId, header, code, footer, input, ...args] = fields[0];\n        [header, code, footer, input, ...args] = [header, code, footer, input, ...args].map(n=>byteStringToText(n));\n        var options = [];\n\n        if (fields.length > 1) {\n            options = fields[1].slice(1);\n        }\n\n        return {\n            \"languageId\": languageId,\n            \"header\": header,\n            \"code\": code,\n            \"footer\": footer,\n            \"input\": input,\n            \"args\": args,\n            \"options\": options\n        }\n    },\n\n\trunAndPrint:\n    function runAndPrint(code, input, lang) {\n      var x=this.run(code.replaceAll(\"‚ê§\", \"\\n\"), input, lang)\n      print.raw(x[0])\n      for (t of x[1].split(\"\\n\")) {\n        if (t.startsWith(\"Real time:\")) break;\n        print.raw(t)\n      }\n    }\n\n};\n\n"
}