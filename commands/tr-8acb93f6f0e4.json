{
    "locked": false,
    "starred": false,
    "name": "tr",
    "command": "const languages = [\n    { code : 'ab', name : 'Abkhazian' },\n    { code : 'aa', name : 'Afar' },\n    { code : 'af', name : 'Afrikaans' },\n    { code : 'ak', name : 'Akan' },\n    { code : 'sq', name : 'Albanian' },\n    { code : 'am', name : 'Amharic' },\n    { code : 'ar', name : 'Arabic' },\n    { code : 'an', name : 'Aragonese' },\n    { code : 'hy', name : 'Armenian' },\n    { code : 'as', name : 'Assamese' },\n    { code : 'av', name : 'Avaric' },\n    { code : 'ae', name : 'Avestan' },\n    { code : 'ay', name : 'Aymara' },\n    { code : 'az', name : 'Azerbaijani' },\n    { code : 'bm', name : 'Bambara' },\n    { code : 'ba', name : 'Bashkir' },\n    { code : 'eu', name : 'Basque' },\n    { code : 'be', name : 'Belarusian' },\n    { code : 'bn', name : 'Bengali' },\n    { code : 'bh', name : 'Bihari languages' },\n    { code : 'bi', name : 'Bislama' },\n    { code : 'bs', name : 'Bosnian' },\n    { code : 'br', name : 'Breton' },\n    { code : 'bg', name : 'Bulgarian' },\n    { code : 'my', name : 'Burmese' },\n    { code : 'ca', name : 'Catalan, Valencian' },\n    { code : 'km', name : 'Central Khmer' },\n    { code : 'ch', name : 'Chamorro' },\n    { code : 'ce', name : 'Chechen' },\n    { code : 'ny', name : 'Chichewa, Chewa, Nyanja' },\n    { code : 'zh', name : 'Chinese' },\n    { code : 'cu', name : 'Church Slavonic, Old Bulgarian, Old Church Slavonic' },\n    { code : 'cv', name : 'Chuvash' },\n    { code : 'kw', name : 'Cornish' },\n    { code : 'co', name : 'Corsican' },\n    { code : 'cr', name : 'Cree' },\n    { code : 'hr', name : 'Croatian' },\n    { code : 'cs', name : 'Czech' },\n    { code : 'da', name : 'Danish' },\n    { code : 'dv', name : 'Divehi, Dhivehi, Maldivian' },\n    { code : 'nl', name : 'Dutch, Flemish' },\n    { code : 'dz', name : 'Dzongkha' },\n    { code : 'en', name : 'English' },\n    { code : 'eo', name : 'Esperanto' },\n    { code : 'et', name : 'Estonian' },\n    { code : 'ee', name : 'Ewe' },\n    { code : 'fo', name : 'Faroese' },\n    { code : 'fj', name : 'Fijian' },\n    { code : 'fi', name : 'Finnish' },\n    { code : 'fr', name : 'French' },\n    { code : 'ff', name : 'Fulah' },\n    { code : 'gd', name : 'Gaelic, Scottish Gaelic' },\n    { code : 'gl', name : 'Galician' },\n    { code : 'lg', name : 'Ganda' },\n    { code : 'ka', name : 'Georgian' },\n    { code : 'de', name : 'German' },\n    { code : 'ki', name : 'Gikuyu, Kikuyu' },\n    { code : 'el', name : 'Greek (Modern)' },\n    { code : 'kl', name : 'Greenlandic, Kalaallisut' },\n    { code : 'gn', name : 'Guarani' },\n    { code : 'gu', name : 'Gujarati' },\n    { code : 'ht', name : 'Haitian, Haitian Creole' },\n    { code : 'ha', name : 'Hausa' },\n    { code : 'he', name : 'Hebrew' },\n    { code : 'hz', name : 'Herero' },\n    { code : 'hi', name : 'Hindi' },\n    { code : 'ho', name : 'Hiri Motu' },\n    { code : 'hu', name : 'Hungarian' },\n    { code : 'is', name : 'Icelandic' },\n    { code : 'io', name : 'Ido' },\n    { code : 'ig', name : 'Igbo' },\n    { code : 'id', name : 'Indonesian' },\n    { code : 'ia', name : 'Interlingua (International Auxiliary Language Association)' },\n    { code : 'ie', name : 'Interlingue' },\n    { code : 'iu', name : 'Inuktitut' },\n    { code : 'ik', name : 'Inupiaq' },\n    { code : 'ga', name : 'Irish' },\n    { code : 'it', name : 'Italian' },\n    { code : 'ja', name : 'Japanese' },\n    { code : 'jv', name : 'Javanese' },\n    { code : 'kn', name : 'Kannada' },\n    { code : 'kr', name : 'Kanuri' },\n    { code : 'ks', name : 'Kashmiri' },\n    { code : 'kk', name : 'Kazakh' },\n    { code : 'rw', name : 'Kinyarwanda' },\n    { code : 'kv', name : 'Komi' },\n    { code : 'kg', name : 'Kongo' },\n    { code : 'ko', name : 'Korean' },\n    { code : 'kj', name : 'Kwanyama, Kuanyama' },\n    { code : 'ku', name : 'Kurdish' },\n    { code : 'ky', name : 'Kyrgyz' },\n    { code : 'lo', name : 'Lao' },\n    { code : 'la', name : 'Latin' },\n    { code : 'lv', name : 'Latvian' },\n    { code : 'lb', name : 'Letzeburgesch, Luxembourgish' },\n    { code : 'li', name : 'Limburgish, Limburgan, Limburger' },\n    { code : 'ln', name : 'Lingala' },\n    { code : 'lt', name : 'Lithuanian' },\n    { code : 'lu', name : 'Luba-Katanga' },\n    { code : 'mk', name : 'Macedonian' },\n    { code : 'mg', name : 'Malagasy' },\n    { code : 'ms', name : 'Malay' },\n    { code : 'ml', name : 'Malayalam' },\n    { code : 'mt', name : 'Maltese' },\n    { code : 'gv', name : 'Manx' },\n    { code : 'mi', name : 'Maori' },\n    { code : 'mr', name : 'Marathi' },\n    { code : 'mh', name : 'Marshallese' },\n    { code : 'ro', name : 'Moldovan, Moldavian, Romanian' },\n    { code : 'mn', name : 'Mongolian' },\n    { code : 'na', name : 'Nauru' },\n    { code : 'nv', name : 'Navajo, Navaho' },\n    { code : 'nd', name : 'Northern Ndebele' },\n    { code : 'ng', name : 'Ndonga' },\n    { code : 'ne', name : 'Nepali' },\n    { code : 'se', name : 'Northern Sami' },\n    { code : 'no', name : 'Norwegian' },\n    { code : 'nb', name : 'Norwegian BokmÃ¥l' },\n    { code : 'nn', name : 'Norwegian Nynorsk' },\n    { code : 'ii', name : 'Nuosu, Sichuan Yi' },\n    { code : 'oc', name : 'Occitan (post 1500)' },\n    { code : 'oj', name : 'Ojibwa' },\n    { code : 'or', name : 'Oriya' },\n    { code : 'om', name : 'Oromo' },\n    { code : 'os', name : 'Ossetian, Ossetic' },\n    { code : 'pi', name : 'Pali' },\n    { code : 'pa', name : 'Panjabi, Punjabi' },\n    { code : 'ps', name : 'Pashto, Pushto' },\n    { code : 'fa', name : 'Persian' },\n    { code : 'pl', name : 'Polish' },\n    { code : 'pt', name : 'Portuguese' },\n    { code : 'qu', name : 'Quechua' },\n    { code : 'rm', name : 'Romansh' },\n    { code : 'rn', name : 'Rundi' },\n    { code : 'ru', name : 'Russian' },\n    { code : 'sm', name : 'Samoan' },\n    { code : 'sg', name : 'Sango' },\n    { code : 'sa', name : 'Sanskrit' },\n    { code : 'sc', name : 'Sardinian' },\n    { code : 'sr', name : 'Serbian' },\n    { code : 'sn', name : 'Shona' },\n    { code : 'sd', name : 'Sindhi' },\n    { code : 'si', name : 'Sinhala, Sinhalese' },\n    { code : 'sk', name : 'Slovak' },\n    { code : 'sl', name : 'Slovenian' },\n    { code : 'so', name : 'Somali' },\n    { code : 'st', name : 'Sotho, Southern' },\n    { code : 'nr', name : 'South Ndebele' },\n    { code : 'es', name : 'Spanish, Castilian' },\n    { code : 'su', name : 'Sundanese' },\n    { code : 'sw', name : 'Swahili' },\n    { code : 'ss', name : 'Swati' },\n    { code : 'sv', name : 'Swedish' },\n    { code : 'tl', name : 'Tagalog' },\n    { code : 'ty', name : 'Tahitian' },\n    { code : 'tg', name : 'Tajik' },\n    { code : 'ta', name : 'Tamil' },\n    { code : 'tt', name : 'Tatar' },\n    { code : 'te', name : 'Telugu' },\n    { code : 'th', name : 'Thai' },\n    { code : 'bo', name : 'Tibetan' },\n    { code : 'ti', name : 'Tigrinya' },\n    { code : 'to', name : 'Tonga (Tonga Islands)' },\n    { code : 'ts', name : 'Tsonga' },\n    { code : 'tn', name : 'Tswana' },\n    { code : 'tr', name : 'Turkish' },\n    { code : 'tk', name : 'Turkmen' },\n    { code : 'tw', name : 'Twi' },\n    { code : 'ug', name : 'Uighur, Uyghur' },\n    { code : 'uk', name : 'Ukrainian' },\n    { code : 'ur', name : 'Urdu' },\n    { code : 'uz', name : 'Uzbek' },\n    { code : 've', name : 'Venda' },\n    { code : 'vi', name : 'Vietnamese' },\n    { code : 'vo', name : 'Volap_k' },\n    { code : 'wa', name : 'Walloon' },\n    { code : 'cy', name : 'Welsh' },\n    { code : 'fy', name : 'Western Frisian' },\n    { code : 'wo', name : 'Wolof' },\n    { code : 'xh', name : 'Xhosa' },\n    { code : 'yi', name : 'Yiddish' },\n    { code : 'yo', name : 'Yoruba' },\n    { code : 'za', name : 'Zhuang, Chuang' },\n    { code : 'zu', name : 'Zulu' }\n];\n\n\ni = input.split(' ')\nsource = i[0]\ntarget = i[1]\n\nif (source.length > 2){\n  source = languages.find( c => c.name == source).code\n}\n\nif (target.length > 2){\n  target = languages.find( c => c.name == target).code\n}\n\nif(languages.some( c => c.code == source || c.name == source) && \n   languages.some( c => c.code == target || c.name == target)){ \n  q = i.slice(2).join(\" \")\n    print(fetchSync('http://linode.arin.ga:45678/' + encodeURIComponent(source) + '/' + encodeURIComponent(target) + '/' + encodeURIComponent(q)))\n} else{\n  print(\"Wrong code / lanugage name\")\n}\n"
}