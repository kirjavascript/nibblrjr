{
    "locked": false,
    "starred": false,
    "name": "weather-test.current",
    "command": "let {getDefault, hasSetDefault} = IRC.require('weather-test.set')\n\nfunction format_weather(json){\n  const dateFns = require('date-fns@1.30.1');const { format } = dateFns;\n  const emoji = {\n    Snow: '🌨', \n    Thunderstorm : '🌩',\n    Rain: '🌧', \n    Drizzle : '🌦',\n    Clouds: '☁️', \n    Clear : '☀️',\n    Mist: '🌫️',\n    Fog: '🌫️',\n    Smoke: '🌫️',\n    Haze: '🌫️',\n    Dust: '🌫️',\n    Sand: '🏜️',\n    Ash: '⚱️',\n    Squall: '💨',\n    Tornado: '🌪️'\n  };\n  const main = json.main\n  const wind = json.wind\n  const weather = json.weather[0]\n  const sys = json.sys\n  print([\n    `${json.name}, ${sys.country}: `,\n    `{c}${weather[\"description\"].padEnd(15, ' ')}{/}`,\n    `${emoji[weather[\"main\"]].padEnd(4,' ')}`,\n    `low: {y}${String((0|main.temp_min)).padStart(2, 0)}{/}{bo}°C{/} `,\n    `high: {y}${String((0|main.temp_max)).padStart(2, 0)}{/}{bo}°C{/} `,\n    `feels: {y}${String((0|main.feels_like)).padStart(2, 0)}{/}{bo}°C{/} `,\n    `humidity: {y}${main.humidity|0}%{/} `,\n    `wind: {y}${wind.speed|0}mph (${wind.deg|0}°){/} `,\n    `air pressure: {y}${main.pressure|0} mbar{/} `,\n  ].join``)\n  print(`Timezone - UTC + {dg}${json.timezone / 60 / 60}{/} Sunrise: {dc}${format(new Date(sys.sunrise * 1000),'HH:mm')}{/} Sunset: {dc}${format(new Date(sys.sunset * 1000),'HH:mm')}{/}`);\n}\n\nfunction get(){\n  try{\n    const API_URL = \"http://api.openweathermap.org/data/2.5/weather\"\n\n    let args = input.split(\",\")\n    const user = IRC.message.from\n    if (input == ''){\n      if(hasSetDefault(user)){\n      \targs = [getDefault(user)]\n      }\n      else{\n        print(`usage: {p}${IRC.trigger}weather{/} [location] [,state] [,country] {dgr}(service provided by openweathermap.org){/}`)\n        return\n      }\n    }\n\tconst request = fetchSync.json(API_URL + `?q=${args.join(\",\")}&appid=${IRC.secret}&units=metric`);\n      print(format_weather(request));\n  }\n  catch(error){\n    print(`No Results for Location ${error}:`)\n  }\n}\n\nif(!module.required){\n    get();\n}\nmodule.exports = {get, format_weather}"
}
