{
    "locked": false,
    "starred": false,
    "name": "weather-test.forecast",
    "command": "const dateFns = require('date-fns@1.30.1');let {getDefault, hasSetDefault} = IRC.require('weather-test.set')\n\nfunction format_weather(json){\n  const { format } = dateFns;\n  const emoji = {\n    Snow: '🌨', \n    Thunderstorm : '🌩',\n    Rain: '🌧', \n    Drizzle : '🌦',\n    Clouds: '☁️', \n    Clear : '☀️',\n    Mist: '🌫️',\n    Fog: '🌫️',\n    Smoke: '🌫️',\n    Haze: '🌫️',\n    Dust: '🌫️',\n    Sand: '🏜️',\n    Ash: '⚱️',\n    Squall: '💨',\n    Tornado: '🌪️'\n  };\n  let moon = m => {\n    if (m < 0.25 || m > 0.9) // New Moon\n    \treturn \"🌑\"\n    if (m < 0.5) // First Quarter Moon\n    \treturn \"🌓\"\n    if (m < 0.75) // Full Moon\n    \treturn \"🌕\"\n    // Last quarter moon\n    return \"🌗\"\n  }\n  const main = json.temp\n  const weather = json.weather[0]\n  print([\n    `{c}${weather[\"description\"].padEnd(15, ' ')}{/}`,\n    `${emoji[weather[\"main\"]].padEnd(4,' ')}`,\n    `low: {y}${String((0|main.min)).padStart(2, 0)}{/}{bo}°C{/} `,\n    `high: {y}${String((0|main.max)).padStart(2, 0)}{/}{bo}°C{/} `,\n    `feels: {y}${String((0|json.feels_like.day)).padStart(2, 0)}{/}{bo}°C{/} `,\n    `humidity: {y}${json.humidity|0}%{/} `,\n    `wind: {y}${json.wind_speed|0}mph (${json.wind_deg|0}°){/} `,\n    `rain: {y}${json.rain|0} mm{/} `,\n  ].join``)\n  print(`Sunrise: {dc}${format(new Date(json.sunrise * 1000),'HH:mm')}{/} Sunset: {dc}${format(new Date(json.sunset * 1000),'HH:mm')}{/} Moon: ${moon(json.moon_phase)}`);\n}\n\nfunction get(){\n  try{\n    const API_URL_FORECAST = \"http://api.openweathermap.org/data/2.5/onecall?exclude=current,minutely,hourly,alerts\"\n    const API_URL_LAT_LONG = \"http://api.openweathermap.org/data/2.5/weather\"\n    let args = input.split(\",\")\n\tconst user = IRC.message.from\n    if (input == ''){\n      if(hasSetDefault(user)){\n      \targs = [getDefault(user)]\n      }\n      else{\n        print(`usage: {p}${IRC.trigger}weather{/} [location] [,state] [,country] {dgr}(service provided by openweathermap.org){/}`)\n        return\n      }\n    }\n    // We need to do 2 requests as the forecasting API only takes lat / long (urgh)\n    const request_lat_long = fetchSync.json(API_URL_LAT_LONG + `?q=${args.join(\",\")}&appid=${IRC.secret}&units=metric`);\n    const lat = request_lat_long.coord.lat\n    const lon = request_lat_long.coord.lon\n    const request = fetchSync.json(API_URL_FORECAST + `&lat=${lat}&lon=${lon}&appid=${IRC.secret}&units=metric`);\n    print(`3 Day Forecast for ${request_lat_long.name}, ${request_lat_long.sys.country} Timezone: {dg}${request.timezone}{/} `)\n    for(var i = 0; i < 3; i++){\n      format_weather(request.daily[i])\n    }\n  }\n  catch(error){\n    print(`No Results for Location ${input}`)\n  }\n}\n\nif(!module.required){\n    get();\n}"
}
